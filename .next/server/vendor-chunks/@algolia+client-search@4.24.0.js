"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia+client-search@4.24.0";
exports.ids = ["vendor-chunks/@algolia+client-search@4.24.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@algolia+client-search@4.24.0/node_modules/@algolia/client-search/dist/client-search.esm.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+client-search@4.24.0/node_modules/@algolia/client-search/dist/client-search.esm.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyACLEnum: () => (/* binding */ ApiKeyACLEnum),\n/* harmony export */   BatchActionEnum: () => (/* binding */ BatchActionEnum),\n/* harmony export */   ScopeEnum: () => (/* binding */ ScopeEnum),\n/* harmony export */   StrategyEnum: () => (/* binding */ StrategyEnum),\n/* harmony export */   SynonymEnum: () => (/* binding */ SynonymEnum),\n/* harmony export */   addApiKey: () => (/* binding */ addApiKey),\n/* harmony export */   assignUserID: () => (/* binding */ assignUserID),\n/* harmony export */   assignUserIDs: () => (/* binding */ assignUserIDs),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   browseObjects: () => (/* binding */ browseObjects),\n/* harmony export */   browseRules: () => (/* binding */ browseRules),\n/* harmony export */   browseSynonyms: () => (/* binding */ browseSynonyms),\n/* harmony export */   chunkedBatch: () => (/* binding */ chunkedBatch),\n/* harmony export */   clearDictionaryEntries: () => (/* binding */ clearDictionaryEntries),\n/* harmony export */   clearObjects: () => (/* binding */ clearObjects),\n/* harmony export */   clearRules: () => (/* binding */ clearRules),\n/* harmony export */   clearSynonyms: () => (/* binding */ clearSynonyms),\n/* harmony export */   copyIndex: () => (/* binding */ copyIndex),\n/* harmony export */   copyRules: () => (/* binding */ copyRules),\n/* harmony export */   copySettings: () => (/* binding */ copySettings),\n/* harmony export */   copySynonyms: () => (/* binding */ copySynonyms),\n/* harmony export */   createBrowsablePromise: () => (/* binding */ createBrowsablePromise),\n/* harmony export */   createMissingObjectIDError: () => (/* binding */ createMissingObjectIDError),\n/* harmony export */   createObjectNotFoundError: () => (/* binding */ createObjectNotFoundError),\n/* harmony export */   createSearchClient: () => (/* binding */ createSearchClient),\n/* harmony export */   createValidUntilNotFoundError: () => (/* binding */ createValidUntilNotFoundError),\n/* harmony export */   customRequest: () => (/* binding */ customRequest),\n/* harmony export */   deleteApiKey: () => (/* binding */ deleteApiKey),\n/* harmony export */   deleteBy: () => (/* binding */ deleteBy),\n/* harmony export */   deleteDictionaryEntries: () => (/* binding */ deleteDictionaryEntries),\n/* harmony export */   deleteIndex: () => (/* binding */ deleteIndex),\n/* harmony export */   deleteObject: () => (/* binding */ deleteObject),\n/* harmony export */   deleteObjects: () => (/* binding */ deleteObjects),\n/* harmony export */   deleteRule: () => (/* binding */ deleteRule),\n/* harmony export */   deleteSynonym: () => (/* binding */ deleteSynonym),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   findAnswers: () => (/* binding */ findAnswers),\n/* harmony export */   findObject: () => (/* binding */ findObject),\n/* harmony export */   generateSecuredApiKey: () => (/* binding */ generateSecuredApiKey),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getAppTask: () => (/* binding */ getAppTask),\n/* harmony export */   getDictionarySettings: () => (/* binding */ getDictionarySettings),\n/* harmony export */   getLogs: () => (/* binding */ getLogs),\n/* harmony export */   getObject: () => (/* binding */ getObject),\n/* harmony export */   getObjectPosition: () => (/* binding */ getObjectPosition),\n/* harmony export */   getObjects: () => (/* binding */ getObjects),\n/* harmony export */   getRule: () => (/* binding */ getRule),\n/* harmony export */   getSecuredApiKeyRemainingValidity: () => (/* binding */ getSecuredApiKeyRemainingValidity),\n/* harmony export */   getSettings: () => (/* binding */ getSettings),\n/* harmony export */   getSynonym: () => (/* binding */ getSynonym),\n/* harmony export */   getTask: () => (/* binding */ getTask),\n/* harmony export */   getTopUserIDs: () => (/* binding */ getTopUserIDs),\n/* harmony export */   getUserID: () => (/* binding */ getUserID),\n/* harmony export */   hasPendingMappings: () => (/* binding */ hasPendingMappings),\n/* harmony export */   initIndex: () => (/* binding */ initIndex),\n/* harmony export */   listApiKeys: () => (/* binding */ listApiKeys),\n/* harmony export */   listClusters: () => (/* binding */ listClusters),\n/* harmony export */   listIndices: () => (/* binding */ listIndices),\n/* harmony export */   listUserIDs: () => (/* binding */ listUserIDs),\n/* harmony export */   moveIndex: () => (/* binding */ moveIndex),\n/* harmony export */   multipleBatch: () => (/* binding */ multipleBatch),\n/* harmony export */   multipleGetObjects: () => (/* binding */ multipleGetObjects),\n/* harmony export */   multipleQueries: () => (/* binding */ multipleQueries),\n/* harmony export */   multipleSearchForFacetValues: () => (/* binding */ multipleSearchForFacetValues),\n/* harmony export */   partialUpdateObject: () => (/* binding */ partialUpdateObject),\n/* harmony export */   partialUpdateObjects: () => (/* binding */ partialUpdateObjects),\n/* harmony export */   removeUserID: () => (/* binding */ removeUserID),\n/* harmony export */   replaceAllObjects: () => (/* binding */ replaceAllObjects),\n/* harmony export */   replaceAllRules: () => (/* binding */ replaceAllRules),\n/* harmony export */   replaceAllSynonyms: () => (/* binding */ replaceAllSynonyms),\n/* harmony export */   replaceDictionaryEntries: () => (/* binding */ replaceDictionaryEntries),\n/* harmony export */   restoreApiKey: () => (/* binding */ restoreApiKey),\n/* harmony export */   saveDictionaryEntries: () => (/* binding */ saveDictionaryEntries),\n/* harmony export */   saveObject: () => (/* binding */ saveObject),\n/* harmony export */   saveObjects: () => (/* binding */ saveObjects),\n/* harmony export */   saveRule: () => (/* binding */ saveRule),\n/* harmony export */   saveRules: () => (/* binding */ saveRules),\n/* harmony export */   saveSynonym: () => (/* binding */ saveSynonym),\n/* harmony export */   saveSynonyms: () => (/* binding */ saveSynonyms),\n/* harmony export */   search: () => (/* binding */ search),\n/* harmony export */   searchDictionaryEntries: () => (/* binding */ searchDictionaryEntries),\n/* harmony export */   searchForFacetValues: () => (/* binding */ searchForFacetValues),\n/* harmony export */   searchRules: () => (/* binding */ searchRules),\n/* harmony export */   searchSynonyms: () => (/* binding */ searchSynonyms),\n/* harmony export */   searchUserIDs: () => (/* binding */ searchUserIDs),\n/* harmony export */   setDictionarySettings: () => (/* binding */ setDictionarySettings),\n/* harmony export */   setSettings: () => (/* binding */ setSettings),\n/* harmony export */   updateApiKey: () => (/* binding */ updateApiKey),\n/* harmony export */   waitAppTask: () => (/* binding */ waitAppTask),\n/* harmony export */   waitTask: () => (/* binding */ waitTask)\n/* harmony export */ });\n/* harmony import */ var _algolia_client_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/client-common */ \"(ssr)/./node_modules/.pnpm/@algolia+client-common@4.24.0/node_modules/@algolia/client-common/dist/client-common.esm.js\");\n/* harmony import */ var _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/transporter */ \"(ssr)/./node_modules/.pnpm/@algolia+transporter@4.24.0/node_modules/@algolia/transporter/dist/transporter.esm.js\");\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/.pnpm/@algolia+requester-common@4.24.0/node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n\nfunction createBrowsablePromise(options) {\r\n    const browse = (data) => {\r\n        return options.request(data).then(response => {\r\n            /**\r\n             * First we send to the developer the\r\n             * batch retrieved from the API.\r\n             */\r\n            if (options.batch !== undefined) {\r\n                options.batch(response.hits);\r\n            }\r\n            /**\r\n             * Then, we ask to the browse concrete implementation\r\n             * if we should stop browsing. As example, the `browseObjects`\r\n             * method will stop if the cursor is not present on the response.\r\n             */\r\n            if (options.shouldStop(response)) {\r\n                return undefined;\r\n            }\r\n            /**\r\n             * Finally, if the response contains a cursor, we browse to the next\r\n             * batch using that same cursor. Otherwise, we just use the traditional\r\n             * browsing using the page element.\r\n             */\r\n            if (response.cursor) {\r\n                return browse({\r\n                    cursor: response.cursor,\r\n                });\r\n            }\r\n            return browse({\r\n                page: (data.page || 0) + 1,\r\n            });\r\n        });\r\n    };\r\n    return browse({});\r\n}\n\nconst createSearchClient = options => {\r\n    const appId = options.appId;\r\n    const auth = (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createAuth)(options.authMode !== undefined ? options.authMode : _algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.AuthMode.WithinHeaders, appId, options.apiKey);\r\n    const transporter = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createTransporter)({\r\n        hosts: [\r\n            { url: `${appId}-dsn.algolia.net`, accept: _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.CallEnum.Read },\r\n            { url: `${appId}.algolia.net`, accept: _algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.CallEnum.Write },\r\n        ].concat((0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.shuffle)([\r\n            { url: `${appId}-1.algolianet.com` },\r\n            { url: `${appId}-2.algolianet.com` },\r\n            { url: `${appId}-3.algolianet.com` },\r\n        ])),\r\n        ...options,\r\n        headers: {\r\n            ...auth.headers(),\r\n            ...{ 'content-type': 'application/x-www-form-urlencoded' },\r\n            ...options.headers,\r\n        },\r\n        queryParameters: {\r\n            ...auth.queryParameters(),\r\n            ...options.queryParameters,\r\n        },\r\n    });\r\n    const base = {\r\n        transporter,\r\n        appId,\r\n        addAlgoliaAgent(segment, version) {\r\n            transporter.userAgent.add({ segment, version });\r\n        },\r\n        clearCache() {\r\n            return Promise.all([\r\n                transporter.requestsCache.clear(),\r\n                transporter.responsesCache.clear(),\r\n            ]).then(() => undefined);\r\n        },\r\n    };\r\n    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.addMethods)(base, options.methods);\r\n};\n\nfunction createMissingObjectIDError() {\r\n    return {\r\n        name: 'MissingObjectIDError',\r\n        message: 'All objects must have an unique objectID ' +\r\n            '(like a primary key) to be valid. ' +\r\n            'Algolia is also able to generate objectIDs ' +\r\n            \"automatically but *it's not recommended*. \" +\r\n            \"To do it, use the `{'autoGenerateObjectIDIfNotExist': true}` option.\",\r\n    };\r\n}\n\nfunction createObjectNotFoundError() {\r\n    return {\r\n        name: 'ObjectNotFoundError',\r\n        message: 'Object not found.',\r\n    };\r\n}\n\nfunction createValidUntilNotFoundError() {\r\n    return {\r\n        name: 'ValidUntilNotFoundError',\r\n        message: 'ValidUntil not found in given secured api key.',\r\n    };\r\n}\n\nconst addApiKey = (base) => {\r\n    return (acl, requestOptions) => {\r\n        const { queryParameters, ...options } = requestOptions || {};\r\n        const data = {\r\n            acl,\r\n            ...(queryParameters !== undefined ? { queryParameters } : {}),\r\n        };\r\n        const wait = (response, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(response.key, waitRequestOptions).catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                    return retry();\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/keys',\r\n            data,\r\n        }, options), wait);\r\n    };\r\n};\n\nconst assignUserID = (base) => {\r\n    return (userID, clusterName, requestOptions) => {\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(requestOptions);\r\n        // eslint-disable-next-line functional/immutable-data\r\n        mappedRequestOptions.queryParameters['X-Algolia-User-ID'] = userID;\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping',\r\n            data: { cluster: clusterName },\r\n        }, mappedRequestOptions);\r\n    };\r\n};\n\nconst assignUserIDs = (base) => {\r\n    return (userIDs, clusterName, requestOptions) => {\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping/batch',\r\n            data: {\r\n                users: userIDs,\r\n                cluster: clusterName,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst clearDictionaryEntries = (base) => {\r\n    return (dictionary, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: {\r\n                clearExistingDictionaryEntries: true,\r\n                requests: { action: 'addEntry', body: [] },\r\n            },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst copyIndex = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return initIndex(base)(from, {\r\n                methods: { waitTask },\r\n            }).waitTask(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n            data: {\r\n                operation: 'copy',\r\n                destination: to,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst copyRules = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Rules],\r\n        });\r\n    };\r\n};\n\nconst copySettings = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Settings],\r\n        });\r\n    };\r\n};\n\nconst copySynonyms = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        return copyIndex(base)(from, to, {\r\n            ...requestOptions,\r\n            scope: [ScopeEnum.Synonyms],\r\n        });\r\n    };\r\n};\n\nconst customRequest = (base) => {\r\n    return (request, requestOptions) => {\r\n        if (request.method === _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get) {\r\n            return base.transporter.read(request, requestOptions);\r\n        }\r\n        return base.transporter.write(request, requestOptions);\r\n    };\r\n};\n\nconst deleteApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const wait = (_, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(apiKey, waitRequestOptions)\r\n                    .then(retry)\r\n                    .catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst deleteDictionaryEntries = (base) => {\r\n    return (dictionary, objectIDs, requestOptions) => {\r\n        const requests = objectIDs.map(objectID => ({\r\n            action: 'deleteEntry',\r\n            body: { objectID },\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: false, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst generateSecuredApiKey = () => {\r\n    return (parentApiKey, restrictions) => {\r\n        const queryParameters = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.serializeQueryParameters)(restrictions);\r\n        const securedKey = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)('sha256', parentApiKey)\r\n            .update(queryParameters)\r\n            .digest('hex');\r\n        return Buffer.from(securedKey + queryParameters).toString('base64');\r\n    };\r\n};\n\nconst getApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getAppTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/task/%s', taskID.toString()),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getDictionarySettings = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '/1/dictionaries/*/settings',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getLogs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/logs',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSecuredApiKeyRemainingValidity = () => {\r\n    return (securedApiKey) => {\r\n        const decodedString = Buffer.from(securedApiKey, 'base64').toString('ascii');\r\n        const regex = /validUntil=(\\d+)/;\r\n        const match = decodedString.match(regex);\r\n        if (match === null) {\r\n            throw createValidUntilNotFoundError();\r\n        }\r\n        return parseInt(match[1], 10) - Math.round(new Date().getTime() / 1000);\r\n    };\r\n};\n\nconst getTopUserIDs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping/top',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getUserID = (base) => {\r\n    return (userID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/clusters/mapping/%s', userID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst hasPendingMappings = (base) => {\r\n    return (requestOptions) => {\r\n        const { retrieveMappings, ...options } = requestOptions || {};\r\n        if (retrieveMappings === true) {\r\n            // eslint-disable-next-line functional/immutable-data\r\n            options.getClusters = true;\r\n        }\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping/pending',\r\n        }, options);\r\n    };\r\n};\n\nconst initIndex = (base) => {\r\n    return (indexName, options = {}) => {\r\n        const searchIndex = {\r\n            transporter: base.transporter,\r\n            appId: base.appId,\r\n            indexName,\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.addMethods)(searchIndex, options.methods);\r\n    };\r\n};\n\nconst listApiKeys = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/keys',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listClusters = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listIndices = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/indexes',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst listUserIDs = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: '1/clusters/mapping',\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst moveIndex = (base) => {\r\n    return (from, to, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return initIndex(base)(from, {\r\n                methods: { waitTask },\r\n            }).waitTask(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n            data: {\r\n                operation: 'move',\r\n                destination: to,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst multipleBatch = (base) => {\r\n    return (requests, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return Promise.all(Object.keys(response.taskID).map(indexName => {\r\n                return initIndex(base)(indexName, {\r\n                    methods: { waitTask },\r\n                }).waitTask(response.taskID[indexName], waitRequestOptions);\r\n            }));\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/batch',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst multipleGetObjects = (base) => {\r\n    return (requests, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/objects',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst multipleQueries = (base) => {\r\n    return (queries, requestOptions) => {\r\n        const requests = queries.map(query => {\r\n            return {\r\n                ...query,\r\n                params: (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.serializeQueryParameters)(query.params || {}),\r\n            };\r\n        });\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/queries',\r\n            data: {\r\n                requests,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst multipleSearchForFacetValues = (base) => {\r\n    return (queries, requestOptions) => {\r\n        return Promise.all(queries.map(query => {\r\n            const { facetName, facetQuery, ...params } = query.params;\r\n            return initIndex(base)(query.indexName, {\r\n                methods: { searchForFacetValues },\r\n            }).searchForFacetValues(facetName, facetQuery, {\r\n                ...requestOptions,\r\n                ...params,\r\n            });\r\n        }));\r\n    };\r\n};\n\nconst removeUserID = (base) => {\r\n    return (userID, requestOptions) => {\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(requestOptions);\r\n        // eslint-disable-next-line functional/immutable-data\r\n        mappedRequestOptions.queryParameters['X-Algolia-User-ID'] = userID;\r\n        return base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: '1/clusters/mapping',\r\n        }, mappedRequestOptions);\r\n    };\r\n};\n\nconst replaceDictionaryEntries = (base) => {\r\n    return (dictionary, entries, requestOptions) => {\r\n        const requests = entries.map(entry => ({\r\n            action: 'addEntry',\r\n            body: entry,\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: true, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst restoreApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const wait = (_, waitRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n                return getApiKey(base)(apiKey, waitRequestOptions).catch((apiError) => {\r\n                    if (apiError.status !== 404) {\r\n                        throw apiError;\r\n                    }\r\n                    return retry();\r\n                });\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s/restore', apiKey),\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst saveDictionaryEntries = (base) => {\r\n    return (dictionary, entries, requestOptions) => {\r\n        const requests = entries.map(entry => ({\r\n            action: 'addEntry',\r\n            body: entry,\r\n        }));\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/batch', dictionary),\r\n            data: { clearExistingDictionaryEntries: false, requests },\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst searchDictionaryEntries = (base) => {\r\n    return (dictionary, query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('/1/dictionaries/%s/search', dictionary),\r\n            data: {\r\n                query,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchUserIDs = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/clusters/mapping/search',\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst setDictionarySettings = (base) => {\r\n    return (settings, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: '/1/dictionaries/*/settings',\r\n            data: settings,\r\n        }, requestOptions), (response, waitRequestOptions) => waitAppTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst updateApiKey = (base) => {\r\n    return (apiKey, requestOptions) => {\r\n        const updatedFields = Object.assign({}, requestOptions);\r\n        const { queryParameters, ...options } = requestOptions || {};\r\n        const data = queryParameters ? { queryParameters } : {};\r\n        const apiKeyFields = [\r\n            'acl',\r\n            'indexes',\r\n            'referers',\r\n            'restrictSources',\r\n            'queryParameters',\r\n            'description',\r\n            'maxQueriesPerIPPerHour',\r\n            'maxHitsPerQuery',\r\n        ];\r\n        // Check that all the fields retrieved through getApiKey are the same as the ones we wanted to update\r\n        const hasChanged = (getApiKeyResponse) => {\r\n            return Object.keys(updatedFields)\r\n                .filter((updatedField) => apiKeyFields.indexOf(updatedField) !== -1)\r\n                .every(updatedField => {\r\n                // If the field is an array, we need to check that they are the same length and that all the values are the same\r\n                if (Array.isArray(getApiKeyResponse[updatedField]) &&\r\n                    Array.isArray(updatedFields[updatedField])) {\r\n                    const getApiKeyResponseArray = getApiKeyResponse[updatedField];\r\n                    return (getApiKeyResponseArray.length === updatedFields[updatedField].length &&\r\n                        getApiKeyResponseArray.every((value, index) => value === updatedFields[updatedField][index]));\r\n                }\r\n                else {\r\n                    return getApiKeyResponse[updatedField] === updatedFields[updatedField];\r\n                }\r\n            });\r\n        };\r\n        const wait = (_, waitRequestOptions) => (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getApiKey(base)(apiKey, waitRequestOptions).then(getApiKeyResponse => {\r\n                return hasChanged(getApiKeyResponse) ? Promise.resolve() : retry();\r\n            });\r\n        });\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/keys/%s', apiKey),\r\n            data,\r\n        }, options), wait);\r\n    };\r\n};\n\nconst waitAppTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getAppTask(base)(taskID, requestOptions).then(response => {\r\n                return response.status !== 'published' ? retry() : undefined;\r\n            });\r\n        });\r\n    };\r\n};\n\nconst batch = (base) => {\r\n    return (requests, requestOptions) => {\r\n        const wait = (response, waitRequestOptions) => {\r\n            return waitTask(base)(response.taskID, waitRequestOptions);\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/batch', base.indexName),\r\n            data: {\r\n                requests,\r\n            },\r\n        }, requestOptions), wait);\r\n    };\r\n};\n\nconst browseObjects = (base) => {\r\n    return (requestOptions) => {\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.cursor === undefined,\r\n            ...requestOptions,\r\n            request: (data) => base.transporter.read({\r\n                method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n                path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/browse', base.indexName),\r\n                data,\r\n            }, requestOptions),\r\n        });\r\n    };\r\n};\n\nconst browseRules = (base) => {\r\n    return (requestOptions) => {\r\n        const options = {\r\n            hitsPerPage: 1000,\r\n            ...requestOptions,\r\n        };\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.hits.length < options.hitsPerPage,\r\n            ...options,\r\n            request(data) {\r\n                return searchRules(base)('', { ...options, ...data }).then((response) => {\r\n                    return {\r\n                        ...response,\r\n                        hits: response.hits.map(rule => {\r\n                            // eslint-disable-next-line functional/immutable-data,no-param-reassign\r\n                            delete rule._highlightResult;\r\n                            return rule;\r\n                        }),\r\n                    };\r\n                });\r\n            },\r\n        });\r\n    };\r\n};\n\nconst browseSynonyms = (base) => {\r\n    return (requestOptions) => {\r\n        const options = {\r\n            hitsPerPage: 1000,\r\n            ...requestOptions,\r\n        };\r\n        return createBrowsablePromise({\r\n            shouldStop: response => response.hits.length < options.hitsPerPage,\r\n            ...options,\r\n            request(data) {\r\n                return searchSynonyms(base)('', { ...options, ...data }).then((response) => {\r\n                    return {\r\n                        ...response,\r\n                        hits: response.hits.map(synonym => {\r\n                            // eslint-disable-next-line functional/immutable-data,no-param-reassign\r\n                            delete synonym._highlightResult;\r\n                            return synonym;\r\n                        }),\r\n                    };\r\n                });\r\n            },\r\n        });\r\n    };\r\n};\n\nconst chunkedBatch = (base) => {\r\n    return (bodies, action, requestOptions) => {\r\n        const { batchSize, ...options } = requestOptions || {};\r\n        const response = {\r\n            taskIDs: [],\r\n            objectIDs: [],\r\n        };\r\n        const forEachBatch = (lastIndex = 0) => {\r\n            // eslint-disable-next-line functional/prefer-readonly-type\r\n            const bodiesChunk = [];\r\n            // eslint-disable-next-line functional/no-let\r\n            let index;\r\n            /* eslint-disable-next-line functional/no-loop-statement */\r\n            for (index = lastIndex; index < bodies.length; index++) {\r\n                // eslint-disable-next-line functional/immutable-data\r\n                bodiesChunk.push(bodies[index]);\r\n                if (bodiesChunk.length === (batchSize || 1000)) {\r\n                    break;\r\n                }\r\n            }\r\n            if (bodiesChunk.length === 0) {\r\n                return Promise.resolve(response);\r\n            }\r\n            return batch(base)(bodiesChunk.map(body => {\r\n                return {\r\n                    action,\r\n                    body,\r\n                };\r\n            }), options).then(res => {\r\n                response.objectIDs = response.objectIDs.concat(res.objectIDs); // eslint-disable-line functional/immutable-data\r\n                response.taskIDs.push(res.taskID); // eslint-disable-line functional/immutable-data\r\n                index++;\r\n                return forEachBatch(index);\r\n            });\r\n        };\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(forEachBatch(), (chunkedBatchResponse, waitRequestOptions) => {\r\n            return Promise.all(chunkedBatchResponse.taskIDs.map(taskID => {\r\n                return waitTask(base)(taskID, waitRequestOptions);\r\n            }));\r\n        });\r\n    };\r\n};\n\nconst clearObjects = (base) => {\r\n    return (requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/clear', base.indexName),\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst clearRules = (base) => {\r\n    return (requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/clear', base.indexName),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst clearSynonyms = (base) => {\r\n    return (requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/clear', base.indexName),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteBy = (base) => {\r\n    return (filters, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/deleteByQuery', base.indexName),\r\n            data: filters,\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteIndex = (base) => {\r\n    return (requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s', base.indexName),\r\n        }, requestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteObject = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(deleteObjects(base)([objectID], requestOptions).then(response => {\r\n            return { taskID: response.taskIDs[0] };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteObjects = (base) => {\r\n    return (objectIDs, requestOptions) => {\r\n        const objects = objectIDs.map(objectID => {\r\n            return { objectID };\r\n        });\r\n        return chunkedBatch(base)(objects, BatchActionEnum.DeleteObject, requestOptions);\r\n    };\r\n};\n\nconst deleteRule = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/%s', base.indexName, objectID),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst deleteSynonym = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Delete,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/%s', base.indexName, objectID),\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst exists = (base) => {\r\n    return (requestOptions) => {\r\n        return getSettings(base)(requestOptions)\r\n            .then(() => true)\r\n            .catch(error => {\r\n            if (error.status !== 404) {\r\n                throw error;\r\n            }\r\n            return false;\r\n        });\r\n    };\r\n};\n\nconst findAnswers = (base) => {\r\n    return (query, queryLanguages, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/answers/%s/prediction', base.indexName),\r\n            data: {\r\n                query,\r\n                queryLanguages,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst findObject = (base) => {\r\n    return (callback, requestOptions) => {\r\n        const { query, paginate, ...options } = requestOptions || {};\r\n        // eslint-disable-next-line functional/no-let\r\n        let page = 0;\r\n        const forEachPage = () => {\r\n            return search(base)(query || '', { ...options, page }).then(result => {\r\n                // eslint-disable-next-line functional/no-loop-statement\r\n                for (const [position, hit] of Object.entries(result.hits)) {\r\n                    // eslint-disable-next-line promise/no-callback-in-promise\r\n                    if (callback(hit)) {\r\n                        return {\r\n                            object: hit,\r\n                            position: parseInt(position, 10),\r\n                            page,\r\n                        };\r\n                    }\r\n                }\r\n                page++;\r\n                // paginate if option was set and has next page\r\n                if (paginate === false || page >= result.nbPages) {\r\n                    throw createObjectNotFoundError();\r\n                }\r\n                return forEachPage();\r\n            });\r\n        };\r\n        return forEachPage();\r\n    };\r\n};\n\nconst getObject = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/%s', base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getObjectPosition = () => {\r\n    return (searchResponse, objectID) => {\r\n        // eslint-disable-next-line functional/no-loop-statement\r\n        for (const [position, hit] of Object.entries(searchResponse.hits)) {\r\n            if (hit.objectID === objectID) {\r\n                return parseInt(position, 10);\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n};\n\nconst getObjects = (base) => {\r\n    return (objectIDs, requestOptions) => {\r\n        const { attributesToRetrieve, ...options } = requestOptions || {};\r\n        const requests = objectIDs.map(objectID => {\r\n            return {\r\n                indexName: base.indexName,\r\n                objectID,\r\n                ...(attributesToRetrieve ? { attributesToRetrieve } : {}),\r\n            };\r\n        });\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: '1/indexes/*/objects',\r\n            data: {\r\n                requests,\r\n            },\r\n        }, options);\r\n    };\r\n};\n\nconst getRule = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/%s', base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSettings = (base) => {\r\n    return (requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/settings', base.indexName),\r\n            data: {\r\n                getVersion: 2,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getSynonym = (base) => {\r\n    return (objectID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)(`1/indexes/%s/synonyms/%s`, base.indexName, objectID),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst getTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Get,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/task/%s', base.indexName, taskID.toString()),\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst partialUpdateObject = (base) => {\r\n    return (object, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(partialUpdateObjects(base)([object], requestOptions).then(response => {\r\n            return {\r\n                objectID: response.objectIDs[0],\r\n                taskID: response.taskIDs[0],\r\n            };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst partialUpdateObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { createIfNotExists, ...options } = requestOptions || {};\r\n        const action = createIfNotExists\r\n            ? BatchActionEnum.PartialUpdateObject\r\n            : BatchActionEnum.PartialUpdateObjectNoCreate;\r\n        return chunkedBatch(base)(objects, action, options);\r\n    };\r\n};\n\nconst replaceAllObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { safe, autoGenerateObjectIDIfNotExist, batchSize, ...options } = requestOptions || {};\r\n        const operation = (from, to, type, operationRequestOptions) => {\r\n            return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n                method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n                path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/operation', from),\r\n                data: {\r\n                    operation: type,\r\n                    destination: to,\r\n                },\r\n            }, operationRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n        };\r\n        const randomSuffix = Math.random()\r\n            .toString(36)\r\n            .substring(7);\r\n        const temporaryIndexName = `${base.indexName}_tmp_${randomSuffix}`;\r\n        const saveObjectsInTemporary = saveObjects({\r\n            appId: base.appId,\r\n            transporter: base.transporter,\r\n            indexName: temporaryIndexName,\r\n        });\r\n        // @ts-ignore\r\n        // eslint-disable-next-line prefer-const, functional/no-let, functional/prefer-readonly-type\r\n        let responses = [];\r\n        const copyWaitablePromise = operation(base.indexName, temporaryIndexName, 'copy', {\r\n            ...options,\r\n            scope: ['settings', 'synonyms', 'rules'],\r\n        });\r\n        // eslint-disable-next-line functional/immutable-data\r\n        responses.push(copyWaitablePromise);\r\n        const result = (safe\r\n            ? copyWaitablePromise.wait(options)\r\n            : copyWaitablePromise)\r\n            .then(() => {\r\n            const saveObjectsWaitablePromise = saveObjectsInTemporary(objects, {\r\n                ...options,\r\n                autoGenerateObjectIDIfNotExist,\r\n                batchSize,\r\n            });\r\n            // eslint-disable-next-line functional/immutable-data\r\n            responses.push(saveObjectsWaitablePromise);\r\n            return safe ? saveObjectsWaitablePromise.wait(options) : saveObjectsWaitablePromise;\r\n        })\r\n            .then(() => {\r\n            const moveWaitablePromise = operation(temporaryIndexName, base.indexName, 'move', options);\r\n            // eslint-disable-next-line functional/immutable-data\r\n            responses.push(moveWaitablePromise);\r\n            return safe ? moveWaitablePromise.wait(options) : moveWaitablePromise;\r\n        })\r\n            .then(() => Promise.all(responses))\r\n            .then(([copyResponse, saveObjectsResponse, moveResponse]) => {\r\n            return {\r\n                objectIDs: saveObjectsResponse.objectIDs,\r\n                taskIDs: [copyResponse.taskID, ...saveObjectsResponse.taskIDs, moveResponse.taskID],\r\n            };\r\n        });\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(result, (_, waitRequestOptions) => {\r\n            return Promise.all(responses.map(response => response.wait(waitRequestOptions)));\r\n        });\r\n    };\r\n};\n\nconst replaceAllRules = (base) => {\r\n    return (rules, requestOptions) => {\r\n        return saveRules(base)(rules, {\r\n            ...requestOptions,\r\n            clearExistingRules: true,\r\n        });\r\n    };\r\n};\n\nconst replaceAllSynonyms = (base) => {\r\n    return (synonyms, requestOptions) => {\r\n        return saveSynonyms(base)(synonyms, {\r\n            ...requestOptions,\r\n            clearExistingSynonyms: true,\r\n        });\r\n    };\r\n};\n\nconst saveObject = (base) => {\r\n    return (object, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(saveObjects(base)([object], requestOptions).then(response => {\r\n            return {\r\n                objectID: response.objectIDs[0],\r\n                taskID: response.taskIDs[0],\r\n            };\r\n        }), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst saveObjects = (base) => {\r\n    return (objects, requestOptions) => {\r\n        const { autoGenerateObjectIDIfNotExist, ...options } = requestOptions || {};\r\n        const action = autoGenerateObjectIDIfNotExist\r\n            ? BatchActionEnum.AddObject\r\n            : BatchActionEnum.UpdateObject;\r\n        if (action === BatchActionEnum.UpdateObject) {\r\n            // eslint-disable-next-line functional/no-loop-statement\r\n            for (const object of objects) {\r\n                if (object.objectID === undefined) {\r\n                    return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(Promise.reject(createMissingObjectIDError()));\r\n                }\r\n            }\r\n        }\r\n        return chunkedBatch(base)(objects, action, options);\r\n    };\r\n};\n\nconst saveRule = (base) => {\r\n    return (rule, requestOptions) => {\r\n        return saveRules(base)([rule], requestOptions);\r\n    };\r\n};\n\nconst saveRules = (base) => {\r\n    return (rules, requestOptions) => {\r\n        const { forwardToReplicas, clearExistingRules, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        if (clearExistingRules) {\r\n            mappedRequestOptions.queryParameters.clearExistingRules = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/batch', base.indexName),\r\n            data: rules,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst saveSynonym = (base) => {\r\n    return (synonym, requestOptions) => {\r\n        return saveSynonyms(base)([synonym], requestOptions);\r\n    };\r\n};\n\nconst saveSynonyms = (base) => {\r\n    return (synonyms, requestOptions) => {\r\n        const { forwardToReplicas, clearExistingSynonyms, replaceExistingSynonyms, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        if (replaceExistingSynonyms || clearExistingSynonyms) {\r\n            mappedRequestOptions.queryParameters.replaceExistingSynonyms = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/batch', base.indexName),\r\n            data: synonyms,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst search = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/query', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchForFacetValues = (base) => {\r\n    return (facetName, facetQuery, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/facets/%s/query', base.indexName, facetName),\r\n            data: {\r\n                facetQuery,\r\n            },\r\n            cacheable: true,\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchRules = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/rules/search', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst searchSynonyms = (base) => {\r\n    return (query, requestOptions) => {\r\n        return base.transporter.read({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Post,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/synonyms/search', base.indexName),\r\n            data: {\r\n                query,\r\n            },\r\n        }, requestOptions);\r\n    };\r\n};\n\nconst setSettings = (base) => {\r\n    return (settings, requestOptions) => {\r\n        const { forwardToReplicas, ...options } = requestOptions || {};\r\n        const mappedRequestOptions = (0,_algolia_transporter__WEBPACK_IMPORTED_MODULE_2__.createMappedRequestOptions)(options);\r\n        if (forwardToReplicas) {\r\n            mappedRequestOptions.queryParameters.forwardToReplicas = 1; // eslint-disable-line functional/immutable-data\r\n        }\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createWaitablePromise)(base.transporter.write({\r\n            method: _algolia_requester_common__WEBPACK_IMPORTED_MODULE_3__.MethodEnum.Put,\r\n            path: (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.encode)('1/indexes/%s/settings', base.indexName),\r\n            data: settings,\r\n        }, mappedRequestOptions), (response, waitRequestOptions) => waitTask(base)(response.taskID, waitRequestOptions));\r\n    };\r\n};\n\nconst waitTask = (base) => {\r\n    return (taskID, requestOptions) => {\r\n        return (0,_algolia_client_common__WEBPACK_IMPORTED_MODULE_1__.createRetryablePromise)(retry => {\r\n            return getTask(base)(taskID, requestOptions).then(response => {\r\n                return response.status !== 'published' ? retry() : undefined;\r\n            });\r\n        });\r\n    };\r\n};\n\nconst ApiKeyACLEnum = {\r\n    AddObject: 'addObject',\r\n    Analytics: 'analytics',\r\n    Browser: 'browse',\r\n    DeleteIndex: 'deleteIndex',\r\n    DeleteObject: 'deleteObject',\r\n    EditSettings: 'editSettings',\r\n    Inference: 'inference',\r\n    ListIndexes: 'listIndexes',\r\n    Logs: 'logs',\r\n    Personalization: 'personalization',\r\n    Recommendation: 'recommendation',\r\n    Search: 'search',\r\n    SeeUnretrievableAttributes: 'seeUnretrievableAttributes',\r\n    Settings: 'settings',\r\n    Usage: 'usage',\r\n};\n\nconst BatchActionEnum = {\r\n    AddObject: 'addObject',\r\n    UpdateObject: 'updateObject',\r\n    PartialUpdateObject: 'partialUpdateObject',\r\n    PartialUpdateObjectNoCreate: 'partialUpdateObjectNoCreate',\r\n    DeleteObject: 'deleteObject',\r\n    DeleteIndex: 'delete',\r\n    ClearIndex: 'clear',\r\n};\n\nconst ScopeEnum = {\r\n    Settings: 'settings',\r\n    Synonyms: 'synonyms',\r\n    Rules: 'rules',\r\n};\n\nconst StrategyEnum = {\r\n    None: 'none',\r\n    StopIfEnoughMatches: 'stopIfEnoughMatches',\r\n};\n\nconst SynonymEnum = {\r\n    Synonym: 'synonym',\r\n    OneWaySynonym: 'oneWaySynonym',\r\n    AltCorrection1: 'altCorrection1',\r\n    AltCorrection2: 'altCorrection2',\r\n    Placeholder: 'placeholder',\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+client-search@4.24.0/node_modules/@algolia/client-search/dist/client-search.esm.js\n");

/***/ })

};
;