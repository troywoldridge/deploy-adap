/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algoliasearch-helper@3.24.3_algoliasearch@4.24.0";
exports.ids = ["vendor-chunks/algoliasearch-helper@3.24.3_algoliasearch@4.24.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/index.js ***!
  \************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar AlgoliaSearchHelper = __webpack_require__(/*! ./src/algoliasearch.helper */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\");\nvar RecommendParameters = __webpack_require__(/*! ./src/RecommendParameters */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendParameters/index.js\");\nvar RecommendResults = __webpack_require__(/*! ./src/RecommendResults */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendResults/index.js\");\nvar SearchParameters = __webpack_require__(/*! ./src/SearchParameters */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./src/SearchResults */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n * @return {AlgoliaSearchHelper} The helper instance\n */\nfunction algoliasearchHelper(client, index, opts, searchResultsOptions) {\n  return new AlgoliaSearchHelper(client, index, opts, searchResultsOptions);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = __webpack_require__(/*! ./src/version */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/version.js\");\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing all the parameters for Recommend.\n * @member module:algoliasearchHelper.RecommendParameters\n * @type {RecommendParameters}\n */\nalgoliasearchHelper.RecommendParameters = RecommendParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\n/**\n * Constructor for the object containing the results for Recommend.\n * @member module:algoliasearchHelper.RecommendResults\n * @type {RecommendResults}\n */\nalgoliasearchHelper.RecommendResults = RecommendResults;\n\nmodule.exports = algoliasearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiwwQkFBMEIsbUJBQU8sQ0FBQyw2S0FBNEI7QUFDOUQsMEJBQTBCLG1CQUFPLENBQUMsaUxBQTJCO0FBQzdELHVCQUF1QixtQkFBTyxDQUFDLDJLQUF3QjtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQywyS0FBd0I7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMscUtBQXFCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQixZQUFZLFFBQVE7QUFDcEIsWUFBWSx5QkFBeUIsbUZBQW1GLGlCQUFpQjtBQUN6SSxXQUFXLDZCQUE2QjtBQUN4QyxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSw4QkFBOEIsbUJBQU8sQ0FBQyxtSkFBZTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBbGdvbGlhU2VhcmNoSGVscGVyID0gcmVxdWlyZSgnLi9zcmMvYWxnb2xpYXNlYXJjaC5oZWxwZXInKTtcbnZhciBSZWNvbW1lbmRQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9zcmMvUmVjb21tZW5kUGFyYW1ldGVycycpO1xudmFyIFJlY29tbWVuZFJlc3VsdHMgPSByZXF1aXJlKCcuL3NyYy9SZWNvbW1lbmRSZXN1bHRzJyk7XG52YXIgU2VhcmNoUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vc3JjL1NlYXJjaFBhcmFtZXRlcnMnKTtcbnZhciBTZWFyY2hSZXN1bHRzID0gcmVxdWlyZSgnLi9zcmMvU2VhcmNoUmVzdWx0cycpO1xuXG4vKipcbiAqIFRoZSBhbGdvbGlhc2VhcmNoSGVscGVyIG1vZHVsZSBpcyB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGxldCBpdHNcbiAqIGNvbnRhaW5zIGV2ZXJ5dGhpbmcgbmVlZGVkIHRvIHVzZSB0aGUgQWxnb2xpYXNlYXJjaFxuICogSGVscGVyLiBJdCBpcyBhIGFsc28gYSBmdW5jdGlvbiB0aGF0IGluc3RhbmNpYXRlIHRoZSBoZWxwZXIuXG4gKiBUbyB1c2UgdGhlIGhlbHBlciwgeW91IGFsc28gbmVlZCB0aGUgQWxnb2xpYSBKUyBjbGllbnQgdjMuXG4gKiBAZXhhbXBsZVxuICogLy91c2luZyB0aGUgVU1EIGJ1aWxkXG4gKiB2YXIgY2xpZW50ID0gYWxnb2xpYXNlYXJjaCgnbGF0ZW5jeScsICc2YmUwNTc2ZmY2MWMwNTNkNWY5YTMyMjVlMmE5MGY3NicpO1xuICogdmFyIGhlbHBlciA9IGFsZ29saWFzZWFyY2hIZWxwZXIoY2xpZW50LCAnYmVzdGJ1eScsIHtcbiAqICAgZmFjZXRzOiBbJ3NoaXBwaW5nJ10sXG4gKiAgIGRpc2p1bmN0aXZlRmFjZXRzOiBbJ2NhdGVnb3J5J11cbiAqIH0pO1xuICogaGVscGVyLm9uKCdyZXN1bHQnLCBmdW5jdGlvbihldmVudCkge1xuICogICBjb25zb2xlLmxvZyhldmVudC5yZXN1bHRzKTtcbiAqIH0pO1xuICogaGVscGVyXG4gKiAgIC50b2dnbGVGYWNldFJlZmluZW1lbnQoJ2NhdGVnb3J5JywgJ01vdmllcyAmIFRWIFNob3dzJylcbiAqICAgLnRvZ2dsZUZhY2V0UmVmaW5lbWVudCgnc2hpcHBpbmcnLCAnRnJlZSBzaGlwcGluZycpXG4gKiAgIC5zZWFyY2goKTtcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgaGVscGVyIGlzIGFuIGV2ZW50IGVtaXR0ZXIgdXNpbmcgdGhlIG5vZGUgQVBJXG4gKiBoZWxwZXIub24oJ3Jlc3VsdCcsIHVwZGF0ZVRoZVJlc3VsdHMpO1xuICogaGVscGVyLm9uY2UoJ3Jlc3VsdCcsIHVwZGF0ZVRoZVJlc3VsdHMpO1xuICogaGVscGVyLnJlbW92ZUxpc3RlbmVyKCdyZXN1bHQnLCB1cGRhdGVUaGVSZXN1bHRzKTtcbiAqIGhlbHBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3Jlc3VsdCcpO1xuICogQG1vZHVsZSBhbGdvbGlhc2VhcmNoSGVscGVyXG4gKiBAcGFyYW0gIHtBbGdvbGlhU2VhcmNofSBjbGllbnQgYW4gQWxnb2xpYVNlYXJjaCBjbGllbnRcbiAqIEBwYXJhbSAge3N0cmluZ30gaW5kZXggdGhlIG5hbWUgb2YgdGhlIGluZGV4IHRvIHF1ZXJ5XG4gKiBAcGFyYW0gIHtTZWFyY2hQYXJhbWV0ZXJzfG9iamVjdH0gb3B0cyBhbiBvYmplY3QgZGVmaW5pbmcgdGhlIGluaXRpYWwgY29uZmlnIG9mIHRoZSBzZWFyY2guIEl0IGRvZXNuJ3QgaGF2ZSB0byBiZSBhIHtTZWFyY2hQYXJhbWV0ZXJzfSwganVzdCBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyB5b3UgbmVlZCBmcm9tIGl0LlxuICogQHBhcmFtIHtTZWFyY2hSZXN1bHRzT3B0aW9uc3xvYmplY3R9IHNlYXJjaFJlc3VsdHNPcHRpb25zIGFuIG9iamVjdCBkZWZpbmluZyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBjcmVhdGluZyB0aGUgc2VhcmNoIHJlc3VsdHMuXG4gKiBAcmV0dXJuIHtBbGdvbGlhU2VhcmNoSGVscGVyfSBUaGUgaGVscGVyIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFsZ29saWFzZWFyY2hIZWxwZXIoY2xpZW50LCBpbmRleCwgb3B0cywgc2VhcmNoUmVzdWx0c09wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBBbGdvbGlhU2VhcmNoSGVscGVyKGNsaWVudCwgaW5kZXgsIG9wdHMsIHNlYXJjaFJlc3VsdHNPcHRpb25zKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBjdXJyZW50bHkgdXNlZFxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci52ZXJzaW9uXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLnZlcnNpb24gPSByZXF1aXJlKCcuL3NyYy92ZXJzaW9uJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIHRoZSBIZWxwZXIuXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXJcbiAqIEB0eXBlIHtBbGdvbGlhU2VhcmNoSGVscGVyfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLkFsZ29saWFTZWFyY2hIZWxwZXIgPSBBbGdvbGlhU2VhcmNoSGVscGVyO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBzZWFyY2guXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnNcbiAqIEB0eXBlIHtTZWFyY2hQYXJhbWV0ZXJzfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLlNlYXJjaFBhcmFtZXRlcnMgPSBTZWFyY2hQYXJhbWV0ZXJzO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIGZvciBSZWNvbW1lbmQuXG4gKiBAbWVtYmVyIG1vZHVsZTphbGdvbGlhc2VhcmNoSGVscGVyLlJlY29tbWVuZFBhcmFtZXRlcnNcbiAqIEB0eXBlIHtSZWNvbW1lbmRQYXJhbWV0ZXJzfVxuICovXG5hbGdvbGlhc2VhcmNoSGVscGVyLlJlY29tbWVuZFBhcmFtZXRlcnMgPSBSZWNvbW1lbmRQYXJhbWV0ZXJzO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIHNlYXJjaC5cbiAqIEBtZW1iZXIgbW9kdWxlOmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0c1xuICogQHR5cGUge1NlYXJjaFJlc3VsdHN9XG4gKi9cbmFsZ29saWFzZWFyY2hIZWxwZXIuU2VhcmNoUmVzdWx0cyA9IFNlYXJjaFJlc3VsdHM7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIHRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzdWx0cyBmb3IgUmVjb21tZW5kLlxuICogQG1lbWJlciBtb2R1bGU6YWxnb2xpYXNlYXJjaEhlbHBlci5SZWNvbW1lbmRSZXN1bHRzXG4gKiBAdHlwZSB7UmVjb21tZW5kUmVzdWx0c31cbiAqL1xuYWxnb2xpYXNlYXJjaEhlbHBlci5SZWNvbW1lbmRSZXN1bHRzID0gUmVjb21tZW5kUmVzdWx0cztcblxubW9kdWxlLmV4cG9ydHMgPSBhbGdvbGlhc2VhcmNoSGVscGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/DerivedHelper/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/DerivedHelper/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/.pnpm/@algolia+events@4.0.1/node_modules/@algolia/events/events.js\");\n\nvar inherits = __webpack_require__(/*! ../functions/inherits */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/inherits.js\");\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state for search\n * @param {function} recommendFn the function to create the derived state for recommendations\n */\nfunction DerivedHelper(mainHelper, fn, recommendFn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.recommendFn = recommendFn;\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function () {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function (parameters) {\n  return this.fn(parameters);\n};\n\nDerivedHelper.prototype.getModifiedRecommendState = function (parameters) {\n  return this.recommendFn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvRGVyaXZlZEhlbHBlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxnSEFBaUI7O0FBRTVDLGVBQWUsbUJBQU8sQ0FBQyxzS0FBdUI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFCQUFxQjtBQUNsRCxPQUFPLHdCQUF3QjtBQUMvQixXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9EZXJpdmVkSGVscGVyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ0BhbGdvbGlhL2V2ZW50cycpO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvaW5oZXJpdHMnKTtcblxuLyoqXG4gKiBBIERlcml2ZWRIZWxwZXIgaXMgYSB3YXkgdG8gY3JlYXRlIHN1YiByZXF1ZXN0cyB0b1xuICogQWxnb2xpYSBmcm9tIGEgbWFpbiBoZWxwZXIuXG4gKiBAY2xhc3NcbiAqIEBjbGFzc2Rlc2MgVGhlIERlcml2ZWRIZWxwZXIgcHJvdmlkZXMgYW4gZXZlbnQgYmFzZWQgaW50ZXJmYWNlIGZvciBzZWFyY2ggY2FsbGJhY2tzOlxuICogIC0gc2VhcmNoOiB3aGVuIGEgc2VhcmNoIGlzIHRyaWdnZXJlZCB1c2luZyB0aGUgYHNlYXJjaCgpYCBtZXRob2QuXG4gKiAgLSByZXN1bHQ6IHdoZW4gdGhlIHJlc3BvbnNlIGlzIHJldHJpZXZlZCBmcm9tIEFsZ29saWEgYW5kIGlzIHByb2Nlc3NlZC5cbiAqICAgIFRoaXMgZXZlbnQgY29udGFpbnMgYSB7QGxpbmsgU2VhcmNoUmVzdWx0c30gb2JqZWN0IGFuZCB0aGVcbiAqICAgIHtAbGluayBTZWFyY2hQYXJhbWV0ZXJzfSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYW5zd2VyLlxuICogQHBhcmFtIHtBbGdvbGlhU2VhcmNoSGVscGVyfSBtYWluSGVscGVyIHRoZSBtYWluIGhlbHBlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZGVyaXZlZCBzdGF0ZSBmb3Igc2VhcmNoXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWNvbW1lbmRGbiB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBkZXJpdmVkIHN0YXRlIGZvciByZWNvbW1lbmRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gRGVyaXZlZEhlbHBlcihtYWluSGVscGVyLCBmbiwgcmVjb21tZW5kRm4pIHtcbiAgdGhpcy5tYWluID0gbWFpbkhlbHBlcjtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLnJlY29tbWVuZEZuID0gcmVjb21tZW5kRm47XG4gIHRoaXMubGFzdFJlc3VsdHMgPSBudWxsO1xuICB0aGlzLmxhc3RSZWNvbW1lbmRSZXN1bHRzID0gbnVsbDtcbn1cblxuaW5oZXJpdHMoRGVyaXZlZEhlbHBlciwgRXZlbnRFbWl0dGVyKTtcblxuLyoqXG4gKiBEZXRhY2ggdGhpcyBoZWxwZXIgZnJvbSB0aGUgbWFpbiBoZWxwZXJcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGRlcml2ZWQgaGVscGVyIGlzIGFscmVhZHkgZGV0YWNoZWRcbiAqL1xuRGVyaXZlZEhlbHBlci5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLm1haW4uZGV0YWNoRGVyaXZlZEhlbHBlcih0aGlzKTtcbn07XG5cbkRlcml2ZWRIZWxwZXIucHJvdG90eXBlLmdldE1vZGlmaWVkU3RhdGUgPSBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuICByZXR1cm4gdGhpcy5mbihwYXJhbWV0ZXJzKTtcbn07XG5cbkRlcml2ZWRIZWxwZXIucHJvdG90eXBlLmdldE1vZGlmaWVkUmVjb21tZW5kU3RhdGUgPSBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuICByZXR1cm4gdGhpcy5yZWNvbW1lbmRGbihwYXJhbWV0ZXJzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVyaXZlZEhlbHBlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendParameters/index.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendParameters/index.js ***!
  \************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * RecommendParameters is the data structure that contains all the information\n * usable for getting recommendations from the Algolia API. It doesn't do the\n * search itself, nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It\n * will be provided when needed.\n * @constructor\n * @classdesc contains all the parameters for recommendations\n * @param {RecommendParametersOptions} opts the options to create the object\n */\nfunction RecommendParameters(opts) {\n  opts = opts || {};\n  this.params = opts.params || [];\n}\n\nRecommendParameters.prototype = {\n  constructor: RecommendParameters,\n\n  addParams: function (params) {\n    var newParams = this.params.slice();\n\n    newParams.push(params);\n\n    return new RecommendParameters({ params: newParams });\n  },\n\n  removeParams: function (id) {\n    return new RecommendParameters({\n      params: this.params.filter(function (param) {\n        return param.$$id !== id;\n      }),\n    });\n  },\n\n  addFrequentlyBoughtTogether: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'bought-together' })\n    );\n  },\n\n  addRelatedProducts: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'related-products' })\n    );\n  },\n\n  addTrendingItems: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-items' })\n    );\n  },\n\n  addTrendingFacets: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-facets' })\n    );\n  },\n\n  addLookingSimilar: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'looking-similar' })\n    );\n  },\n\n  _buildQueries: function (indexName, cache) {\n    return this.params\n      .filter(function (params) {\n        return cache[params.$$id] === undefined;\n      })\n      .map(function (params) {\n        var query = Object.assign({}, params, {\n          indexName: indexName,\n          // @TODO: remove this if it ever gets handled by the API\n          threshold: params.threshold || 0,\n        });\n        delete query.$$id;\n\n        return query;\n      });\n  },\n};\n\nmodule.exports = RecommendParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvUmVjb21tZW5kUGFyYW1ldGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEscUNBQXFDLG1CQUFtQjtBQUN4RCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSwwQkFBMEI7QUFDNUQ7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSwyQkFBMkI7QUFDN0Q7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSx5QkFBeUI7QUFDM0Q7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSwwQkFBMEI7QUFDNUQ7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWSwwQkFBMEI7QUFDNUQ7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLE9BQU87QUFDUCxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvUmVjb21tZW5kUGFyYW1ldGVycy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVjb21tZW5kUGFyYW1ldGVycyBpcyB0aGUgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgdGhlIGluZm9ybWF0aW9uXG4gKiB1c2FibGUgZm9yIGdldHRpbmcgcmVjb21tZW5kYXRpb25zIGZyb20gdGhlIEFsZ29saWEgQVBJLiBJdCBkb2Vzbid0IGRvIHRoZVxuICogc2VhcmNoIGl0c2VsZiwgbm9yIGRvZXMgaXQgY29udGFpbnMgbG9naWMgYWJvdXQgdGhlIHBhcmFtZXRlcnMuXG4gKiBJdCBpcyBhbiBpbW11dGFibGUgb2JqZWN0LCB0aGVyZWZvcmUgaXQgaGFzIGJlZW4gY3JlYXRlZCBpbiBhIHdheSB0aGF0IGVhY2hcbiAqIGNoYW5nZXMgZG9lcyBub3QgY2hhbmdlIHRoZSBvYmplY3QgaXRzZWxmIGJ1dCByZXR1cm5zIGEgY29weSB3aXRoIHRoZVxuICogbW9kaWZpY2F0aW9uLlxuICogVGhpcyBvYmplY3Qgc2hvdWxkIHByb2JhYmx5IG5vdCBiZSBpbnN0YW50aWF0ZWQgb3V0c2lkZSBvZiB0aGUgaGVscGVyLiBJdFxuICogd2lsbCBiZSBwcm92aWRlZCB3aGVuIG5lZWRlZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGNsYXNzZGVzYyBjb250YWlucyBhbGwgdGhlIHBhcmFtZXRlcnMgZm9yIHJlY29tbWVuZGF0aW9uc1xuICogQHBhcmFtIHtSZWNvbW1lbmRQYXJhbWV0ZXJzT3B0aW9uc30gb3B0cyB0aGUgb3B0aW9ucyB0byBjcmVhdGUgdGhlIG9iamVjdFxuICovXG5mdW5jdGlvbiBSZWNvbW1lbmRQYXJhbWV0ZXJzKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMucGFyYW1zID0gb3B0cy5wYXJhbXMgfHwgW107XG59XG5cblJlY29tbWVuZFBhcmFtZXRlcnMucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUmVjb21tZW5kUGFyYW1ldGVycyxcblxuICBhZGRQYXJhbXM6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5wYXJhbXMuc2xpY2UoKTtcblxuICAgIG5ld1BhcmFtcy5wdXNoKHBhcmFtcyk7XG5cbiAgICByZXR1cm4gbmV3IFJlY29tbWVuZFBhcmFtZXRlcnMoeyBwYXJhbXM6IG5ld1BhcmFtcyB9KTtcbiAgfSxcblxuICByZW1vdmVQYXJhbXM6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBuZXcgUmVjb21tZW5kUGFyYW1ldGVycyh7XG4gICAgICBwYXJhbXM6IHRoaXMucGFyYW1zLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtLiQkaWQgIT09IGlkO1xuICAgICAgfSksXG4gICAgfSk7XG4gIH0sXG5cbiAgYWRkRnJlcXVlbnRseUJvdWdodFRvZ2V0aGVyOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAnYm91Z2h0LXRvZ2V0aGVyJyB9KVxuICAgICk7XG4gIH0sXG5cbiAgYWRkUmVsYXRlZFByb2R1Y3RzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAncmVsYXRlZC1wcm9kdWN0cycgfSlcbiAgICApO1xuICB9LFxuXG4gIGFkZFRyZW5kaW5nSXRlbXM6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRQYXJhbXMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHsgbW9kZWw6ICd0cmVuZGluZy1pdGVtcycgfSlcbiAgICApO1xuICB9LFxuXG4gIGFkZFRyZW5kaW5nRmFjZXRzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUGFyYW1zKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG1vZGVsOiAndHJlbmRpbmctZmFjZXRzJyB9KVxuICAgICk7XG4gIH0sXG5cbiAgYWRkTG9va2luZ1NpbWlsYXI6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRQYXJhbXMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHsgbW9kZWw6ICdsb29raW5nLXNpbWlsYXInIH0pXG4gICAgKTtcbiAgfSxcblxuICBfYnVpbGRRdWVyaWVzOiBmdW5jdGlvbiAoaW5kZXhOYW1lLCBjYWNoZSkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtc1xuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVtwYXJhbXMuJCRpZF0gPT09IHVuZGVmaW5lZDtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgaW5kZXhOYW1lOiBpbmRleE5hbWUsXG4gICAgICAgICAgLy8gQFRPRE86IHJlbW92ZSB0aGlzIGlmIGl0IGV2ZXIgZ2V0cyBoYW5kbGVkIGJ5IHRoZSBBUElcbiAgICAgICAgICB0aHJlc2hvbGQ6IHBhcmFtcy50aHJlc2hvbGQgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSBxdWVyeS4kJGlkO1xuXG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgIH0pO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWNvbW1lbmRQYXJhbWV0ZXJzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendParameters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendResults/index.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendResults/index.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {RecommendParameters} state state that led to the response\n * @param {Record<string,RecommendResultItem>} results the results from algolia client\n **/\nfunction RecommendResults(state, results) {\n  this._state = state;\n  this._rawResults = {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  state.params.forEach(function (param) {\n    var id = param.$$id;\n    self[id] = results[id];\n    self._rawResults[id] = results[id];\n  });\n}\n\nRecommendResults.prototype = {\n  constructor: RecommendResults,\n};\n\nmodule.exports = RecommendResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvUmVjb21tZW5kUmVzdWx0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksMEJBQTBCO0FBQzlCLFdBQVcscUJBQXFCO0FBQ2hDLFdBQVcsb0NBQW9DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL1JlY29tbWVuZFJlc3VsdHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciBTZWFyY2hSZXN1bHRzXG4gKiBAY2xhc3NcbiAqIEBjbGFzc2Rlc2MgU2VhcmNoUmVzdWx0cyBjb250YWlucyB0aGUgcmVzdWx0cyBvZiBhIHF1ZXJ5IHRvIEFsZ29saWEgdXNpbmcgdGhlXG4gKiB7QGxpbmsgQWxnb2xpYVNlYXJjaEhlbHBlcn0uXG4gKiBAcGFyYW0ge1JlY29tbWVuZFBhcmFtZXRlcnN9IHN0YXRlIHN0YXRlIHRoYXQgbGVkIHRvIHRoZSByZXNwb25zZVxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLFJlY29tbWVuZFJlc3VsdEl0ZW0+fSByZXN1bHRzIHRoZSByZXN1bHRzIGZyb20gYWxnb2xpYSBjbGllbnRcbiAqKi9cbmZ1bmN0aW9uIFJlY29tbWVuZFJlc3VsdHMoc3RhdGUsIHJlc3VsdHMpIHtcbiAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbiAgdGhpcy5fcmF3UmVzdWx0cyA9IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHN0YXRlLnBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBpZCA9IHBhcmFtLiQkaWQ7XG4gICAgc2VsZltpZF0gPSByZXN1bHRzW2lkXTtcbiAgICBzZWxmLl9yYXdSZXN1bHRzW2lkXSA9IHJlc3VsdHNbaWRdO1xuICB9KTtcbn1cblxuUmVjb21tZW5kUmVzdWx0cy5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWNvbW1lbmRSZXN1bHRzLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWNvbW1lbmRSZXN1bHRzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendResults/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js ***!
  \******************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js\");\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute]\n      ? [valueAsString]\n      : refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure(mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined)\n      throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(\n    refinementList,\n    attribute,\n    refinementType\n  ) {\n    if (attribute === undefined) {\n      // return the same object if the list is already empty\n      // this is mainly for tests, as it doesn't have much impact on performance\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function (\n        memo,\n        key\n      ) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n\n        return memo;\n      },\n      {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements =\n      Boolean(refinementList[attribute]) &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  },\n};\n\nmodule.exports = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/index.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/index.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar intersection = __webpack_require__(/*! ../functions/intersection */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/intersection.js\");\nvar merge = __webpack_require__(/*! ../functions/merge */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ../functions/objectHasKeys */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ../functions/omit */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar valToNumber = __webpack_require__(/*! ../functions/valToNumber */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/valToNumber.js\");\nvar isValidUserToken = __webpack_require__(/*! ../utils/isValidUserToken */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\");\n\nvar RefinementList = __webpack_require__(/*! ./RefinementList */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js\");\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function (el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters\n    ? SearchParameters._parseNumbers(newParameters)\n    : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\n    );\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements =\n    params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity',\n  ];\n\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\n      geoRect\n    ) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge(partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\n      ) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(\n          facet.name,\n          facet.rootPath\n        );\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (\n    currentState.tagFilters &&\n    params.tagRefinements &&\n    params.tagRefinements.length > 0\n  ) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n        'an error, if it is not, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      ),\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements ===\n        this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\n      return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: [],\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index,\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery,\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage,\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets,\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets,\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n,\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance,\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod,\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        }),\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return key === attribute && value.op === operator;\n        }),\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      }),\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return (\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator]\n    );\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\n        function (memo, key) {\n          var operators = numericRefinements[key];\n          var operatorList = {};\n\n          operators = operators || {};\n          Object.keys(operators).forEach(function (operator) {\n            var values = operators[operator] || [];\n            var outValues = [];\n            values.forEach(function (value) {\n              var predicateResult = attribute(\n                { val: value, op: operator },\n                key,\n                'numeric'\n              );\n              if (!predicateResult) outValues.push(value);\n            });\n            if (outValues.length !== values.length) {\n              hasChanged = true;\n            }\n            operatorList[operator] = outValues;\n          });\n\n          memo[key] = operatorList;\n\n          return memo;\n        },\n        {}\n      );\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet]),\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' +\n          hierarchicalFacet.name +\n          '`'\n      );\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    if (\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n    if (\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      }),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error(\n      'Cannot refine the undeclared facet ' +\n        facet +\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\n    );\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\n      );\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facet)\n    );\n\n    var mod = {};\n\n    var upOneOrMultipleLevel =\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\n        // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\n          value + separator\n        ) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\n      );\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(\n      this.disjunctiveFacetsRefinements,\n      facet,\n      value\n    );\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function (facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements)\n      .filter(function (facet) {\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\n      })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets())\n      .sort();\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function (facet) {\n        return facet.name;\n      }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    ).sort();\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements',\n  ],\n\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (\n        managedParameters.indexOf(paramName) === -1 &&\n        paramValue !== undefined\n      ) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\n      previous,\n      key\n    ) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    },\n    previousPlainObject);\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  },\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js ***!
  \***************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = generateTrees;\n\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar prepareHierarchicalFacetSortBy = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator =\n      state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var hierarchicalRootPath =\n      state._getHierarchicalRootPath(hierarchicalFacet);\n    var hierarchicalShowParentLevel =\n      state._getHierarchicalShowParentLevel(hierarchicalFacet);\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function (facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null,\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function (subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function (facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function (tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function (tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvU2VhcmNoUmVzdWx0cy9nZW5lcmF0ZS1oaWVyYXJjaGljYWwtdHJlZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQSxTQUFTLG1CQUFPLENBQUMsc0xBQStCO0FBQ2hELFdBQVcsbUJBQU8sQ0FBQyw4SkFBbUI7QUFDdEMscUNBQXFDLG1CQUFPLENBQUMsMEtBQXlCO0FBQ3RFLGNBQWMsbUJBQU8sQ0FBQyxvS0FBc0I7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvU2VhcmNoUmVzdWx0cy9nZW5lcmF0ZS1oaWVyYXJjaGljYWwtdHJlZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVUcmVlcztcblxudmFyIGZ2ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2VzY2FwZUZhY2V0VmFsdWUnKTtcbnZhciBmaW5kID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2ZpbmQnKTtcbnZhciBwcmVwYXJlSGllcmFyY2hpY2FsRmFjZXRTb3J0QnkgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZm9ybWF0U29ydCcpO1xudmFyIG9yZGVyQnkgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvb3JkZXJCeScpO1xudmFyIGVzY2FwZUZhY2V0VmFsdWUgPSBmdi5lc2NhcGVGYWNldFZhbHVlO1xudmFyIHVuZXNjYXBlRmFjZXRWYWx1ZSA9IGZ2LnVuZXNjYXBlRmFjZXRWYWx1ZTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVUcmVlcyhzdGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGUoaGllcmFyY2hpY2FsRmFjZXRSZXN1bHQsIGhpZXJhcmNoaWNhbEZhY2V0SW5kZXgpIHtcbiAgICB2YXIgaGllcmFyY2hpY2FsRmFjZXQgPSBzdGF0ZS5oaWVyYXJjaGljYWxGYWNldHNbaGllcmFyY2hpY2FsRmFjZXRJbmRleF07XG4gICAgdmFyIGhpZXJhcmNoaWNhbEZhY2V0UmVmaW5lbWVudCA9XG4gICAgICAoc3RhdGUuaGllcmFyY2hpY2FsRmFjZXRzUmVmaW5lbWVudHNbaGllcmFyY2hpY2FsRmFjZXQubmFtZV0gJiZcbiAgICAgICAgc3RhdGUuaGllcmFyY2hpY2FsRmFjZXRzUmVmaW5lbWVudHNbaGllcmFyY2hpY2FsRmFjZXQubmFtZV1bMF0pIHx8XG4gICAgICAnJztcbiAgICB2YXIgaGllcmFyY2hpY2FsU2VwYXJhdG9yID1cbiAgICAgIHN0YXRlLl9nZXRIaWVyYXJjaGljYWxGYWNldFNlcGFyYXRvcihoaWVyYXJjaGljYWxGYWNldCk7XG4gICAgdmFyIGhpZXJhcmNoaWNhbFJvb3RQYXRoID1cbiAgICAgIHN0YXRlLl9nZXRIaWVyYXJjaGljYWxSb290UGF0aChoaWVyYXJjaGljYWxGYWNldCk7XG4gICAgdmFyIGhpZXJhcmNoaWNhbFNob3dQYXJlbnRMZXZlbCA9XG4gICAgICBzdGF0ZS5fZ2V0SGllcmFyY2hpY2FsU2hvd1BhcmVudExldmVsKGhpZXJhcmNoaWNhbEZhY2V0KTtcbiAgICB2YXIgc29ydEJ5ID0gcHJlcGFyZUhpZXJhcmNoaWNhbEZhY2V0U29ydEJ5KFxuICAgICAgc3RhdGUuX2dldEhpZXJhcmNoaWNhbEZhY2V0U29ydEJ5KGhpZXJhcmNoaWNhbEZhY2V0KVxuICAgICk7XG5cbiAgICB2YXIgcm9vdEV4aGF1c3RpdmUgPSBoaWVyYXJjaGljYWxGYWNldFJlc3VsdC5ldmVyeShmdW5jdGlvbiAoZmFjZXRSZXN1bHQpIHtcbiAgICAgIHJldHVybiBmYWNldFJlc3VsdC5leGhhdXN0aXZlO1xuICAgIH0pO1xuXG4gICAgdmFyIGdlbmVyYXRlVHJlZUZuID0gZ2VuZXJhdGVIaWVyYXJjaGljYWxUcmVlKFxuICAgICAgc29ydEJ5LFxuICAgICAgaGllcmFyY2hpY2FsU2VwYXJhdG9yLFxuICAgICAgaGllcmFyY2hpY2FsUm9vdFBhdGgsXG4gICAgICBoaWVyYXJjaGljYWxTaG93UGFyZW50TGV2ZWwsXG4gICAgICBoaWVyYXJjaGljYWxGYWNldFJlZmluZW1lbnRcbiAgICApO1xuXG4gICAgdmFyIHJlc3VsdHMgPSBoaWVyYXJjaGljYWxGYWNldFJlc3VsdDtcblxuICAgIGlmIChoaWVyYXJjaGljYWxSb290UGF0aCkge1xuICAgICAgcmVzdWx0cyA9IGhpZXJhcmNoaWNhbEZhY2V0UmVzdWx0LnNsaWNlKFxuICAgICAgICBoaWVyYXJjaGljYWxSb290UGF0aC5zcGxpdChoaWVyYXJjaGljYWxTZXBhcmF0b3IpLmxlbmd0aFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cy5yZWR1Y2UoZ2VuZXJhdGVUcmVlRm4sIHtcbiAgICAgIG5hbWU6IHN0YXRlLmhpZXJhcmNoaWNhbEZhY2V0c1toaWVyYXJjaGljYWxGYWNldEluZGV4XS5uYW1lLFxuICAgICAgY291bnQ6IG51bGwsIC8vIHJvb3QgbGV2ZWwsIG5vIGNvdW50XG4gICAgICBpc1JlZmluZWQ6IHRydWUsIC8vIHJvb3QgbGV2ZWwsIGFsd2F5cyByZWZpbmVkXG4gICAgICBwYXRoOiBudWxsLCAvLyByb290IGxldmVsLCBubyBwYXRoXG4gICAgICBlc2NhcGVkVmFsdWU6IG51bGwsXG4gICAgICBleGhhdXN0aXZlOiByb290RXhoYXVzdGl2ZSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSGllcmFyY2hpY2FsVHJlZShcbiAgc29ydEJ5LFxuICBoaWVyYXJjaGljYWxTZXBhcmF0b3IsXG4gIGhpZXJhcmNoaWNhbFJvb3RQYXRoLFxuICBoaWVyYXJjaGljYWxTaG93UGFyZW50TGV2ZWwsXG4gIGN1cnJlbnRSZWZpbmVtZW50XG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdlbmVyYXRlVHJlZShcbiAgICBoaWVyYXJjaGljYWxUcmVlLFxuICAgIGhpZXJhcmNoaWNhbEZhY2V0UmVzdWx0LFxuICAgIGN1cnJlbnRIaWVyYXJjaGljYWxMZXZlbFxuICApIHtcbiAgICB2YXIgcGFyZW50ID0gaGllcmFyY2hpY2FsVHJlZTtcblxuICAgIGlmIChjdXJyZW50SGllcmFyY2hpY2FsTGV2ZWwgPiAwKSB7XG4gICAgICB2YXIgbGV2ZWwgPSAwO1xuXG4gICAgICBwYXJlbnQgPSBoaWVyYXJjaGljYWxUcmVlO1xuXG4gICAgICB3aGlsZSAobGV2ZWwgPCBjdXJyZW50SGllcmFyY2hpY2FsTGV2ZWwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3RbXV19IGhpZXJhcmNoaWNhbCBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgZGF0YSA9IHBhcmVudCAmJiBBcnJheS5pc0FycmF5KHBhcmVudC5kYXRhKSA/IHBhcmVudC5kYXRhIDogW107XG4gICAgICAgIHBhcmVudCA9IGZpbmQoZGF0YSwgZnVuY3Rpb24gKHN1YnRyZWUpIHtcbiAgICAgICAgICByZXR1cm4gc3VidHJlZS5pc1JlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXZlbCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHdlIGZvdW5kIGEgcmVmaW5lZCBwYXJlbnQsIGxldCdzIGFkZCBjdXJyZW50IGxldmVsIGRhdGEgdW5kZXIgaXRcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAvLyBmaWx0ZXIgdmFsdWVzIGluIGNhc2UgYW4gb2JqZWN0IGhhcyBtdWx0aXBsZSBjYXRlZ29yaWVzOlxuICAgICAgLy8gICB7XG4gICAgICAvLyAgICAgY2F0ZWdvcmllczoge1xuICAgICAgLy8gICAgICAgbGV2ZWwwOiBbJ2JlZXJzJywgJ2Jpw6hyZXMnXSxcbiAgICAgIC8vICAgICAgIGxldmVsMTogWydiZWVycyA+IElQQScsICdiacOocmVzID4gQmVsZ2VzJ11cbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgIH1cbiAgICAgIC8vXG4gICAgICAvLyBJZiBwYXJlbnQgcmVmaW5lbWVudCBpcyBgYmVlcnNgLCB0aGVuIHdlIGRvIG5vdCB3YW50IHRvIGhhdmUgYGJpw6hyZXMgPiBCZWxnZXNgXG4gICAgICAvLyBzaG93aW5nIHVwXG5cbiAgICAgIHZhciBwaWNrZWQgPSBPYmplY3Qua2V5cyhoaWVyYXJjaGljYWxGYWNldFJlc3VsdC5kYXRhKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChmYWNldFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIFtmYWNldFZhbHVlLCBoaWVyYXJjaGljYWxGYWNldFJlc3VsdC5kYXRhW2ZhY2V0VmFsdWVdXTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodHVwbGUpIHtcbiAgICAgICAgICB2YXIgZmFjZXRWYWx1ZSA9IHR1cGxlWzBdO1xuICAgICAgICAgIHJldHVybiBvbmx5TWF0Y2hpbmdUcmVlKFxuICAgICAgICAgICAgZmFjZXRWYWx1ZSxcbiAgICAgICAgICAgIHBhcmVudC5wYXRoIHx8IGhpZXJhcmNoaWNhbFJvb3RQYXRoLFxuICAgICAgICAgICAgY3VycmVudFJlZmluZW1lbnQsXG4gICAgICAgICAgICBoaWVyYXJjaGljYWxTZXBhcmF0b3IsXG4gICAgICAgICAgICBoaWVyYXJjaGljYWxSb290UGF0aCxcbiAgICAgICAgICAgIGhpZXJhcmNoaWNhbFNob3dQYXJlbnRMZXZlbFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICBwYXJlbnQuZGF0YSA9IG9yZGVyQnkoXG4gICAgICAgIHBpY2tlZC5tYXAoZnVuY3Rpb24gKHR1cGxlKSB7XG4gICAgICAgICAgdmFyIGZhY2V0VmFsdWUgPSB0dXBsZVswXTtcbiAgICAgICAgICB2YXIgZmFjZXRDb3VudCA9IHR1cGxlWzFdO1xuXG4gICAgICAgICAgcmV0dXJuIGZvcm1hdChcbiAgICAgICAgICAgIGZhY2V0Q291bnQsXG4gICAgICAgICAgICBmYWNldFZhbHVlLFxuICAgICAgICAgICAgaGllcmFyY2hpY2FsU2VwYXJhdG9yLFxuICAgICAgICAgICAgdW5lc2NhcGVGYWNldFZhbHVlKGN1cnJlbnRSZWZpbmVtZW50KSxcbiAgICAgICAgICAgIGhpZXJhcmNoaWNhbEZhY2V0UmVzdWx0LmV4aGF1c3RpdmVcbiAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgc29ydEJ5WzBdLFxuICAgICAgICBzb3J0QnlbMV1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpZXJhcmNoaWNhbFRyZWU7XG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5mdW5jdGlvbiBvbmx5TWF0Y2hpbmdUcmVlKFxuICBmYWNldFZhbHVlLFxuICBwYXJlbnRQYXRoLFxuICBjdXJyZW50UmVmaW5lbWVudCxcbiAgaGllcmFyY2hpY2FsU2VwYXJhdG9yLFxuICBoaWVyYXJjaGljYWxSb290UGF0aCxcbiAgaGllcmFyY2hpY2FsU2hvd1BhcmVudExldmVsXG4pIHtcbiAgLy8gd2Ugd2FudCB0aGUgZmFjZXRWYWx1ZSBpcyBhIGNoaWxkIG9mIGhpZXJhcmNoaWNhbFJvb3RQYXRoXG4gIGlmIChcbiAgICBoaWVyYXJjaGljYWxSb290UGF0aCAmJlxuICAgIChmYWNldFZhbHVlLmluZGV4T2YoaGllcmFyY2hpY2FsUm9vdFBhdGgpICE9PSAwIHx8XG4gICAgICBoaWVyYXJjaGljYWxSb290UGF0aCA9PT0gZmFjZXRWYWx1ZSlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gd2UgYWx3YXlzIHdhbnQgcm9vdCBsZXZlbHMgKG9ubHkgd2hlbiB0aGVyZSBpcyBubyBwcmVmaXggcGF0aClcbiAgcmV0dXJuIChcbiAgICAoIWhpZXJhcmNoaWNhbFJvb3RQYXRoICYmXG4gICAgICBmYWNldFZhbHVlLmluZGV4T2YoaGllcmFyY2hpY2FsU2VwYXJhdG9yKSA9PT0gLTEpIHx8XG4gICAgLy8gaWYgdGhlcmUgaXMgYSByb290UGF0aCwgYmVpbmcgcm9vdCBsZXZlbCBtZWFuIDEgbGV2ZWwgdW5kZXIgcm9vdFBhdGhcbiAgICAoaGllcmFyY2hpY2FsUm9vdFBhdGggJiZcbiAgICAgIGZhY2V0VmFsdWUuc3BsaXQoaGllcmFyY2hpY2FsU2VwYXJhdG9yKS5sZW5ndGggLVxuICAgICAgICBoaWVyYXJjaGljYWxSb290UGF0aC5zcGxpdChoaWVyYXJjaGljYWxTZXBhcmF0b3IpLmxlbmd0aCA9PT1cbiAgICAgICAgMSkgfHxcbiAgICAvLyBpZiBjdXJyZW50IHJlZmluZW1lbnQgaXMgYSByb290IGxldmVsIGFuZCBjdXJyZW50IGZhY2V0VmFsdWUgaXMgYSByb290IGxldmVsLFxuICAgIC8vIGtlZXAgdGhlIGZhY2V0VmFsdWVcbiAgICAoZmFjZXRWYWx1ZS5pbmRleE9mKGhpZXJhcmNoaWNhbFNlcGFyYXRvcikgPT09IC0xICYmXG4gICAgICBjdXJyZW50UmVmaW5lbWVudC5pbmRleE9mKGhpZXJhcmNoaWNhbFNlcGFyYXRvcikgPT09IC0xKSB8fFxuICAgIC8vIGN1cnJlbnRSZWZpbmVtZW50IGlzIGEgY2hpbGQgb2YgdGhlIGZhY2V0IHZhbHVlXG4gICAgY3VycmVudFJlZmluZW1lbnQuaW5kZXhPZihmYWNldFZhbHVlKSA9PT0gMCB8fFxuICAgIC8vIGZhY2V0VmFsdWUgaXMgYSBjaGlsZCBvZiB0aGUgY3VycmVudCBwYXJlbnQsIGFkZCBpdFxuICAgIChmYWNldFZhbHVlLmluZGV4T2YocGFyZW50UGF0aCArIGhpZXJhcmNoaWNhbFNlcGFyYXRvcikgPT09IDAgJiZcbiAgICAgIChoaWVyYXJjaGljYWxTaG93UGFyZW50TGV2ZWwgfHxcbiAgICAgICAgZmFjZXRWYWx1ZS5pbmRleE9mKGN1cnJlbnRSZWZpbmVtZW50KSA9PT0gMCkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChcbiAgZmFjZXRDb3VudCxcbiAgZmFjZXRWYWx1ZSxcbiAgaGllcmFyY2hpY2FsU2VwYXJhdG9yLFxuICBjdXJyZW50UmVmaW5lbWVudCxcbiAgZXhoYXVzdGl2ZVxuKSB7XG4gIHZhciBwYXJ0cyA9IGZhY2V0VmFsdWUuc3BsaXQoaGllcmFyY2hpY2FsU2VwYXJhdG9yKTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXS50cmltKCksXG4gICAgcGF0aDogZmFjZXRWYWx1ZSxcbiAgICBlc2NhcGVkVmFsdWU6IGVzY2FwZUZhY2V0VmFsdWUoZmFjZXRWYWx1ZSksXG4gICAgY291bnQ6IGZhY2V0Q291bnQsXG4gICAgaXNSZWZpbmVkOlxuICAgICAgY3VycmVudFJlZmluZW1lbnQgPT09IGZhY2V0VmFsdWUgfHxcbiAgICAgIGN1cnJlbnRSZWZpbmVtZW50LmluZGV4T2YoZmFjZXRWYWx1ZSArIGhpZXJhcmNoaWNhbFNlcGFyYXRvcikgPT09IDAsXG4gICAgZXhoYXVzdGl2ZTogZXhoYXVzdGl2ZSxcbiAgICBkYXRhOiBudWxsLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar compact = __webpack_require__(/*! ../functions/compact */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/compact.js\");\nvar defaultsPure = __webpack_require__(/*! ../functions/defaultsPure */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\");\nvar fv = __webpack_require__(/*! ../functions/escapeFacetValue */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\");\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar findIndex = __webpack_require__(/*! ../functions/findIndex */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/findIndex.js\");\nvar formatSort = __webpack_require__(/*! ../functions/formatSort */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/formatSort.js\");\nvar mergeNumericMax = __webpack_require__(/*! ../functions/mergeNumericMax */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js\");\nvar orderBy = __webpack_require__(/*! ../functions/orderBy */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/orderBy.js\");\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = __webpack_require__(/*! ./generate-hierarchical-tree */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js\");\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(\n    hierarchicalFacets,\n    function facetKeyMatchesAttribute(hierarchicalFacet) {\n      var facetNames = hierarchicalFacet.attributes || [];\n      return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    }\n  );\n}\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @param {object} options options to control results content\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0] || {};\n\n  this._rawResults = results;\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  var opts = defaultsPure(options, {\n    persistHierarchicalRootCount: false,\n  });\n  Object.keys(opts).forEach(function (key) {\n    self[key] = opts[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(\n    function initFutureTree() {\n      return [];\n    }\n  );\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount,\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.facets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data =\n          self.persistHierarchicalRootCount\n            ? mergeNumericMax(\n                self.hierarchicalFacets[position][attributeIndex].data,\n                facetResults\n              )\n            : defaultsPure(\n                facetResults,\n                self.hierarchicalFacets[position][attributeIndex].data\n              );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest =\n          (mainSubResponse.facets && mainSubResponse.facets[dfacet]) || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: mergeNumericMax(dataFromMainRequest, facetResults),\n          exhaustive: result.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          result.facets_stats,\n          dfacet\n        );\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (\n            refinementValue\n          ) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (\n              !self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(\n                unescapeFacetValue(refinementValue)\n              ) > -1\n            ) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (\n      currentRefinement.length === 0 ||\n      currentRefinement[0].split(separator).length < 2\n    ) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function (result) {\n      var facets = result && result.facets ? result.facets : {};\n\n      Object.keys(facets).forEach(function (dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        // @MAJOR: remove this legacy behaviour in next major version\n        var defaultData = {};\n\n        if (\n          currentRefinement.length > 0 &&\n          !self.persistHierarchicalRootCount\n        ) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] =\n            self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainFacets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount,\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || { name: facetName };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(\n    generateHierarchicalTree(state)\n  );\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return (\n    find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate)\n  );\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name),\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value),\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet =\n      results._state.getHierarchicalFacetByName(attribute);\n    var separator =\n      results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var currentRefinement = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    );\n\n    if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n      currentRefinement = currentRefinement.replace(\n        hierarchicalFacet.rootPath + separator,\n        ''\n      );\n    }\n\n    var currentRefinementSplit = currentRefinement.split(separator);\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n\n  return undefined;\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined =\n    item.name === (currentRefinement[depth] && currentRefinement[depth].trim());\n  if (item.data) {\n    item.data.forEach(function (child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({ data: sortedChildren }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var hide = facetOrdering.hide || [];\n  var order = facetOrdering.order || [];\n\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    var hidden = hide.indexOf(name) > -1;\n    if (!hidden && reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else if (!hidden) {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [\n      ['path', 'name'],\n      ['asc', 'asc'],\n    ];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure(opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy),\n  });\n\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(\n    function (data, facetName) {\n      if (options.facetOrdering) {\n        var facetOrdering = getFacetOrdering(results, facetName);\n        if (facetOrdering) {\n          return sortViaFacetOrdering(data, facetOrdering);\n        }\n      }\n\n      if (Array.isArray(options.sortBy)) {\n        var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n        return orderBy(data, order[0], order[1]);\n      } else if (typeof options.sortBy === 'function') {\n        return vanillaSortFn(options.sortBy, data);\n      }\n      throw new Error(\n        'options.sortBy is optional but if defined it must be ' +\n          'either an array of string (predicates) or a sorting function'\n      );\n    },\n    facetValues,\n    attributes\n  );\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'facet', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'exclude', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(\n          state,\n          'disjunctive',\n          attributeName,\n          name,\n          results.disjunctiveFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getHierarchicalRefinement(\n          state,\n          attributeName,\n          name,\n          results.hierarchicalFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator,\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function (name) {\n    res.push({ type: 'tag', attributeName: '_tags', name: name });\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet &&\n      find(intermediateFacet.data, function (f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\nmodule.exports = SearchResults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/algoliasearch.helper.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/algoliasearch.helper.js ***!
  \*******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar EventEmitter = __webpack_require__(/*! @algolia/events */ \"(ssr)/./node_modules/.pnpm/@algolia+events@4.0.1/node_modules/@algolia/events/events.js\");\nvar DerivedHelper = __webpack_require__(/*! ./DerivedHelper */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/DerivedHelper/index.js\");\nvar escapeFacetValue = (__webpack_require__(/*! ./functions/escapeFacetValue */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\").escapeFacetValue);\nvar inherits = __webpack_require__(/*! ./functions/inherits */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/inherits.js\");\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js\");\nvar objectHasKeys = __webpack_require__(/*! ./functions/objectHasKeys */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\");\nvar omit = __webpack_require__(/*! ./functions/omit */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js\");\nvar RecommendParameters = __webpack_require__(/*! ./RecommendParameters */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendParameters/index.js\");\nvar RecommendResults = __webpack_require__(/*! ./RecommendResults */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/RecommendResults/index.js\");\nvar requestBuilder = __webpack_require__(/*! ./requestBuilder */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/requestBuilder.js\");\nvar SearchParameters = __webpack_require__(/*! ./SearchParameters */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchParameters/index.js\");\nvar SearchResults = __webpack_require__(/*! ./SearchResults */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/SearchResults/index.js\");\nvar sortAndMergeRecommendations = __webpack_require__(/*! ./utils/sortAndMergeRecommendations */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js\");\nvar version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/version.js\");\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */ /**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */ /**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */ /**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */ /**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */ /**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */ /**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */ /**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n */ function AlgoliaSearchHelper(client, index, options, searchResultsOptions) {\n    if (typeof client.addAlgoliaAgent === 'function') {\n        client.addAlgoliaAgent('JS Helper (' + version + ')');\n    }\n    this.setClient(client);\n    var opts = options || {};\n    opts.index = index;\n    this.state = SearchParameters.make(opts);\n    this.recommendState = new RecommendParameters({\n        params: opts.recommendState\n    });\n    this.lastResults = null;\n    this.lastRecommendResults = null;\n    this._queryId = 0;\n    this._recommendQueryId = 0;\n    this._lastQueryIdReceived = -1;\n    this._lastRecommendQueryIdReceived = -1;\n    this.derivedHelpers = [];\n    this._currentNbQueries = 0;\n    this._currentNbRecommendQueries = 0;\n    this._searchResultsOptions = searchResultsOptions;\n    this._recommendCache = {};\n}\ninherits(AlgoliaSearchHelper, EventEmitter);\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */ AlgoliaSearchHelper.prototype.search = function() {\n    this._search({\n        onlyWithDerivedHelpers: false\n    });\n    return this;\n};\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {\n    this._search({\n        onlyWithDerivedHelpers: true\n    });\n    return this;\n};\nAlgoliaSearchHelper.prototype.searchWithComposition = function() {\n    this._runComposition({\n        onlyWithDerivedHelpers: true\n    });\n    return this;\n};\n/**\n * Sends the recommendation queries set in the state. When the method is\n * called, it triggers a `fetch` event. The results will be available through\n * the `result` event. If an error occurs, an `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires fetch\n * @fires result\n * @fires error\n * @chainable\n */ AlgoliaSearchHelper.prototype.recommend = function() {\n    this._recommend();\n    return this;\n};\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */ AlgoliaSearchHelper.prototype.getQuery = function() {\n    var state = this.state;\n    return requestBuilder._getHitsSearchParams(state);\n};\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */ AlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {\n    var tempState = !options ? this.state : this.state.setQueryParameters(options);\n    var queries = requestBuilder._getQueries(tempState.index, tempState);\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    this._currentNbQueries++;\n    this.emit('searchOnce', {\n        state: tempState\n    });\n    if (cb) {\n        this.client.search(queries).then(function(content) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit('searchQueueEmpty');\n            }\n            cb(null, new SearchResults(tempState, content.results), tempState);\n        }).catch(function(err) {\n            self._currentNbQueries--;\n            if (self._currentNbQueries === 0) {\n                self.emit('searchQueueEmpty');\n            }\n            cb(err, null, tempState);\n        });\n        return undefined;\n    }\n    return this.client.search(queries).then(function(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        return {\n            content: new SearchResults(tempState, content.results),\n            state: tempState,\n            _originalResponse: content\n        };\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        throw e;\n    });\n};\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */ AlgoliaSearchHelper.prototype.findAnswers = function(options) {\n    // eslint-disable-next-line no-console\n    console.warn('[algoliasearch-helper] answers is no longer supported');\n    var state = this.state;\n    var derivedHelper = this.derivedHelpers[0];\n    if (!derivedHelper) {\n        return Promise.resolve([]);\n    }\n    var derivedState = derivedHelper.getModifiedState(state);\n    var data = merge({\n        attributesForPrediction: options.attributesForPrediction,\n        nbHits: options.nbHits\n    }, {\n        params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n            'attributesToSnippet',\n            'hitsPerPage',\n            'restrictSearchableAttributes',\n            'snippetEllipsisText'\n        ])\n    });\n    var errorMessage = 'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n    if (typeof this.client.initIndex !== 'function') {\n        throw new Error(errorMessage);\n    }\n    var index = this.client.initIndex(derivedState.index);\n    if (typeof index.findAnswers !== 'function') {\n        throw new Error(errorMessage);\n    }\n    return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */ /**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */ /**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */ AlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {\n    var clientHasSFFV = typeof this.client.searchForFacetValues === 'function' && // v5 has a wrong sffv signature\n    typeof this.client.searchForFacets !== 'function';\n    var clientHasInitIndex = typeof this.client.initIndex === 'function';\n    if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== 'function') {\n        throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues');\n    }\n    var state = this.state.setQueryParameters(userState || {});\n    var isDisjunctive = state.isDisjunctiveFacet(facet);\n    var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);\n    this._currentNbQueries++;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var searchForFacetValuesPromise;\n    // newer algoliasearch ^3.27.1 - ~4.0.0\n    if (clientHasSFFV) {\n        searchForFacetValuesPromise = this.client.searchForFacetValues([\n            {\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]);\n    // algoliasearch < 3.27.1\n    } else if (clientHasInitIndex) {\n        searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n    } else {\n        // @MAJOR only use client.search\n        delete algoliaQuery.facetName;\n        searchForFacetValuesPromise = this.client.search([\n            {\n                type: 'facet',\n                facet: facet,\n                indexName: state.index,\n                params: algoliaQuery\n            }\n        ]).then(function processResponse(response) {\n            return response.results[0];\n        });\n    }\n    this.emit('searchForFacetValues', {\n        state: state,\n        facet: facet,\n        query: query\n    });\n    return searchForFacetValuesPromise.then(function addIsRefined(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        content = Array.isArray(content) ? content[0] : content;\n        content.facetHits.forEach(function(f) {\n            f.escapedValue = escapeFacetValue(f.value);\n            f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n        });\n        return content;\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        throw e;\n    });\n};\n/**\n * Search for facet values using the Composition API & based on a query and the name of a faceted attribute.\n * This triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */ AlgoliaSearchHelper.prototype.searchForCompositionFacetValues = function(facet, query, maxFacetHits, userState) {\n    if (typeof this.client.searchForFacetValues !== 'function') {\n        throw new Error('search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues');\n    }\n    var state = this.state.setQueryParameters(userState || {});\n    var isDisjunctive = state.isDisjunctiveFacet(facet);\n    this._currentNbQueries++;\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var searchForFacetValuesPromise;\n    searchForFacetValuesPromise = this.client.searchForFacetValues({\n        compositionID: state.index,\n        facetName: facet,\n        searchForFacetValuesRequest: {\n            params: {\n                query: query,\n                maxFacetHits: maxFacetHits,\n                searchQuery: requestBuilder._getCompositionHitsSearchParams(state)\n            }\n        }\n    });\n    this.emit('searchForFacetValues', {\n        state: state,\n        facet: facet,\n        query: query\n    });\n    return searchForFacetValuesPromise.then(function addIsRefined(content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        content = content.results[0];\n        content.facetHits.forEach(function(f) {\n            f.escapedValue = escapeFacetValue(f.value);\n            f.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f.escapedValue) : state.isFacetRefined(facet, f.escapedValue);\n        });\n        return content;\n    }, function(e) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n        throw e;\n    });\n};\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setQuery = function(q) {\n    this._change({\n        state: this.state.resetPage().setQuery(q),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */ AlgoliaSearchHelper.prototype.clearRefinements = function(name) {\n    this._change({\n        state: this.state.resetPage().clearRefinements(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.clearTags = function() {\n    this._change({\n        state: this.state.resetPage().clearTags(),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {\n    return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */ AlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, path) {\n    this._change({\n        state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().addNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */ AlgoliaSearchHelper.prototype.addRefine = function() {\n    return this.addFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().addExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */ AlgoliaSearchHelper.prototype.addExclude = function() {\n    return this.addFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().addTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Adds a \"frequently bought together\" recommendation query.\n *\n * @param {FrequentlyBoughtTogetherQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addFrequentlyBoughtTogether = function(params) {\n    this._recommendChange({\n        state: this.recommendState.addFrequentlyBoughtTogether(params)\n    });\n    return this;\n};\n/**\n * Adds a \"related products\" recommendation query.\n *\n * @param {RelatedProductsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addRelatedProducts = function(params) {\n    this._recommendChange({\n        state: this.recommendState.addRelatedProducts(params)\n    });\n    return this;\n};\n/**\n * Adds a \"trending items\" recommendation query.\n *\n * @param {TrendingItemsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addTrendingItems = function(params) {\n    this._recommendChange({\n        state: this.recommendState.addTrendingItems(params)\n    });\n    return this;\n};\n/**\n * Adds a \"trending facets\" recommendation query.\n *\n * @param {TrendingFacetsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addTrendingFacets = function(params) {\n    this._recommendChange({\n        state: this.recommendState.addTrendingFacets(params)\n    });\n    return this;\n};\n/**\n * Adds a \"looking similar\" recommendation query.\n *\n * @param {LookingSimilarQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.addLookingSimilar = function(params) {\n    this._recommendChange({\n        state: this.recommendState.addLookingSimilar(params)\n    });\n    return this;\n};\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {\n    this._change({\n        state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {\n    return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {\n    this._change({\n        state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */ AlgoliaSearchHelper.prototype.removeRefine = function() {\n    return this.removeFacetRefinement.apply(this, arguments);\n};\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().removeExcludeRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */ AlgoliaSearchHelper.prototype.removeExclude = function() {\n    return this.removeFacetExclusion.apply(this, arguments);\n};\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().removeTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Removes a \"frequently bought together\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeFrequentlyBoughtTogether = function(id) {\n    this._recommendChange({\n        state: this.recommendState.removeParams(id)\n    });\n    return this;\n};\n/**\n * Removes a \"related products\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeRelatedProducts = function(id) {\n    this._recommendChange({\n        state: this.recommendState.removeParams(id)\n    });\n    return this;\n};\n/**\n * Removes a \"trending items\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeTrendingItems = function(id) {\n    this._recommendChange({\n        state: this.recommendState.removeParams(id)\n    });\n    return this;\n};\n/**\n * Removes a \"trending facets\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeTrendingFacets = function(id) {\n    this._recommendChange({\n        state: this.recommendState.removeParams(id)\n    });\n    return this;\n};\n/**\n * Removes a \"looking similar\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.removeLookingSimilar = function(id) {\n    this._recommendChange({\n        state: this.recommendState.removeParams(id)\n    });\n    return this;\n};\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */ AlgoliaSearchHelper.prototype.toggleExclude = function() {\n    return this.toggleFacetExclusion.apply(this, arguments);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n};\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {\n    this._change({\n        state: this.state.resetPage().toggleFacetRefinement(facet, value),\n        isPageReset: true\n    });\n    return this;\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */ AlgoliaSearchHelper.prototype.toggleRefine = function() {\n    return this.toggleFacetRefinement.apply(this, arguments);\n};\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.toggleTag = function(tag) {\n    this._change({\n        state: this.state.resetPage().toggleTagRefinement(tag),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */ AlgoliaSearchHelper.prototype.nextPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page + 1);\n};\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */ AlgoliaSearchHelper.prototype.previousPage = function() {\n    var page = this.state.page || 0;\n    return this.setPage(page - 1);\n};\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */ function setCurrentPage(page) {\n    if (page < 0) throw new Error('Page requested below 0.');\n    this._change({\n        state: this.state.setPage(page),\n        isPageReset: false\n    });\n    return this;\n}\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setIndex = function(name) {\n    this._change({\n        state: this.state.resetPage().setIndex(name),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */ AlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {\n    this._change({\n        state: this.state.resetPage().setQueryParameter(parameter, value),\n        isPageReset: true\n    });\n    return this;\n};\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */ AlgoliaSearchHelper.prototype.setState = function(newState) {\n    this._change({\n        state: SearchParameters.make(newState),\n        isPageReset: false\n    });\n    return this;\n};\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */ AlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n};\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */ AlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {\n    if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n        return true;\n    } else if (this.state.isConjunctiveFacet(attribute)) {\n        return this.state.isFacetRefined(attribute);\n    } else if (this.state.isDisjunctiveFacet(attribute)) {\n        return this.state.isDisjunctiveFacetRefined(attribute);\n    } else if (this.state.isHierarchicalFacet(attribute)) {\n        return this.state.isHierarchicalFacetRefined(attribute);\n    }\n    // there's currently no way to know that the user did call `addNumericRefinement` at some point\n    // thus we cannot distinguish if there once was a numeric refinement that was cleared\n    // so we will return false in every other situations to be consistent\n    // while what we should do here is throw because we did not find the attribute in any type\n    // of refinement\n    return false;\n};\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */ AlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {\n    return this.state.isExcludeRefined(facet, value);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */ AlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {\n    return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */ AlgoliaSearchHelper.prototype.hasTag = function(tag) {\n    return this.state.isTagRefined(tag);\n};\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */ AlgoliaSearchHelper.prototype.isTagRefined = function() {\n    return this.hasTagRefinements.apply(this, arguments);\n};\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */ AlgoliaSearchHelper.prototype.getIndex = function() {\n    return this.state.index;\n};\nfunction getCurrentPage() {\n    return this.state.page;\n}\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */ AlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */ AlgoliaSearchHelper.prototype.getTags = function() {\n    return this.state.tagRefinements;\n};\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */ AlgoliaSearchHelper.prototype.getRefinements = function(facetName) {\n    var refinements = [];\n    if (this.state.isConjunctiveFacet(facetName)) {\n        var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n        conjRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: 'conjunctive'\n            });\n        });\n        var excludeRefinements = this.state.getExcludeRefinements(facetName);\n        excludeRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: 'exclude'\n            });\n        });\n    } else if (this.state.isDisjunctiveFacet(facetName)) {\n        var disjunctiveRefinements = this.state.getDisjunctiveRefinements(facetName);\n        disjunctiveRefinements.forEach(function(r) {\n            refinements.push({\n                value: r,\n                type: 'disjunctive'\n            });\n        });\n    }\n    var numericRefinements = this.state.getNumericRefinements(facetName);\n    Object.keys(numericRefinements).forEach(function(operator) {\n        var value = numericRefinements[operator];\n        refinements.push({\n            value: value,\n            operator: operator,\n            type: 'numeric'\n        });\n    });\n    return refinements;\n};\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */ AlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {\n    return this.state.getNumericRefinement(attribute, operator);\n};\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */ AlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {\n    return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n// /////////// PRIVATE\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */ AlgoliaSearchHelper.prototype._search = function(options) {\n    var state = this.state;\n    var states = [];\n    var mainQueries = [];\n    if (!options.onlyWithDerivedHelpers) {\n        mainQueries = requestBuilder._getQueries(state.index, state);\n        states.push({\n            state: state,\n            queriesCount: mainQueries.length,\n            helper: this\n        });\n        this.emit('search', {\n            state: state,\n            results: this.lastResults\n        });\n    }\n    var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n        var derivedState = derivedHelper.getModifiedState(state);\n        var derivedStateQueries = derivedState.index ? requestBuilder._getQueries(derivedState.index, derivedState) : [];\n        states.push({\n            state: derivedState,\n            queriesCount: derivedStateQueries.length,\n            helper: derivedHelper\n        });\n        derivedHelper.emit('search', {\n            state: derivedState,\n            results: derivedHelper.lastResults\n        });\n        return derivedStateQueries;\n    });\n    var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n    var queryId = this._queryId++;\n    this._currentNbQueries++;\n    if (!queries.length) {\n        return Promise.resolve({\n            results: []\n        }).then(this._dispatchAlgoliaResponse.bind(this, states, queryId));\n    }\n    try {\n        this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n    } catch (error) {\n        // If we reach this part, we're in an internal error state\n        this.emit('error', {\n            error: error\n        });\n    }\n    return undefined;\n};\n/**\n * Perform the underlying queries\n * @private\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */ AlgoliaSearchHelper.prototype._runComposition = function() {\n    var state = this.state;\n    var states = [];\n    var mainQueries = [];\n    var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n        var derivedState = derivedHelper.getModifiedState(state);\n        var derivedStateQueries = requestBuilder._getCompositionQueries(derivedState);\n        states.push({\n            state: derivedState,\n            queriesCount: derivedStateQueries.length,\n            helper: derivedHelper\n        });\n        derivedHelper.emit('search', {\n            state: derivedState,\n            results: derivedHelper.lastResults\n        });\n        return derivedStateQueries;\n    });\n    var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n    var queryId = this._queryId++;\n    this._currentNbQueries++;\n    if (!queries.length) {\n        return Promise.resolve({\n            results: []\n        }).then(this._dispatchAlgoliaResponse.bind(this, states, queryId));\n    }\n    if (queries.length > 1) {\n        throw new Error('Only one query is allowed when using a composition.');\n    }\n    var query = queries[0];\n    try {\n        this.client.search(query).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));\n    } catch (error) {\n        // If we reach this part, we're in an internal error state\n        this.emit('error', {\n            error: error\n        });\n    }\n    return undefined;\n};\nAlgoliaSearchHelper.prototype._recommend = function() {\n    var searchState = this.state;\n    var recommendState = this.recommendState;\n    var index = this.getIndex();\n    var states = [\n        {\n            state: recommendState,\n            index: index,\n            helper: this\n        }\n    ];\n    var ids = recommendState.params.map(function(param) {\n        return param.$$id;\n    });\n    this.emit('fetch', {\n        recommend: {\n            state: recommendState,\n            results: this.lastRecommendResults\n        }\n    });\n    var cache = this._recommendCache;\n    var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {\n        var derivedIndex = derivedHelper.getModifiedState(searchState).index;\n        if (!derivedIndex) {\n            return [];\n        }\n        // Contrary to what is done when deriving the search state, we don't want to\n        // provide the current recommend state to the derived helper, as it would\n        // inherit unwanted queries. We instead provide an empty recommend state.\n        var derivedState = derivedHelper.getModifiedRecommendState(new RecommendParameters());\n        states.push({\n            state: derivedState,\n            index: derivedIndex,\n            helper: derivedHelper\n        });\n        ids = Array.prototype.concat.apply(ids, derivedState.params.map(function(param) {\n            return param.$$id;\n        }));\n        derivedHelper.emit('fetch', {\n            recommend: {\n                state: derivedState,\n                results: derivedHelper.lastRecommendResults\n            }\n        });\n        return derivedState._buildQueries(derivedIndex, cache);\n    });\n    var queries = Array.prototype.concat.apply(this.recommendState._buildQueries(index, cache), derivedQueries);\n    if (queries.length === 0) {\n        return;\n    }\n    if (queries.length > 0 && typeof this.client.getRecommendations === 'undefined') {\n        // eslint-disable-next-line no-console\n        console.warn('Please update algoliasearch/lite to the latest version in order to use recommend widgets.');\n        return;\n    }\n    var queryId = this._recommendQueryId++;\n    this._currentNbRecommendQueries++;\n    try {\n        this.client.getRecommendations(queries).then(this._dispatchRecommendResponse.bind(this, queryId, states, ids)).catch(this._dispatchRecommendError.bind(this, queryId));\n    } catch (error) {\n        // If we reach this part, we're in an internal error state\n        this.emit('error', {\n            error: error\n        });\n    }\n    return;\n};\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */ AlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    // @TODO remove the number of outdated queries discarded instead of just one\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n    var results = content.results.slice();\n    var rawContent = Object.keys(content).reduce(function(value, key) {\n        if (key !== 'results') value[key] = content[key];\n        return value;\n    }, {});\n    if (Object.keys(rawContent).length <= 0) {\n        rawContent = undefined;\n    }\n    states.forEach(function(s) {\n        var state = s.state;\n        var queriesCount = s.queriesCount;\n        var helper = s.helper;\n        var specificResults = results.splice(0, queriesCount);\n        if (!state.index) {\n            helper.emit('result', {\n                results: null,\n                state: state\n            });\n            return;\n        }\n        helper.lastResults = new SearchResults(state, specificResults, self._searchResultsOptions);\n        if (rawContent !== undefined) helper.lastResults._rawContent = rawContent;\n        helper.emit('result', {\n            results: helper.lastResults,\n            state: state\n        });\n    });\n};\nAlgoliaSearchHelper.prototype._dispatchRecommendResponse = function(queryId, states, ids, content) {\n    // @TODO remove the number of outdated queries discarded instead of just one\n    if (queryId < this._lastRecommendQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbRecommendQueries -= queryId - this._lastRecommendQueryIdReceived;\n    this._lastRecommendQueryIdReceived = queryId;\n    if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n    var cache = this._recommendCache;\n    var idsMap = {};\n    ids.filter(function(id) {\n        return cache[id] === undefined;\n    }).forEach(function(id, index) {\n        if (!idsMap[id]) idsMap[id] = [];\n        idsMap[id].push(index);\n    });\n    Object.keys(idsMap).forEach(function(id) {\n        var indices = idsMap[id];\n        var firstResult = content.results[indices[0]];\n        if (indices.length === 1) {\n            cache[id] = firstResult;\n            return;\n        }\n        cache[id] = Object.assign({}, firstResult, {\n            hits: sortAndMergeRecommendations(indices.map(function(idx) {\n                return content.results[idx].hits;\n            }))\n        });\n    });\n    var results = {};\n    ids.forEach(function(id) {\n        results[id] = cache[id];\n    });\n    states.forEach(function(s) {\n        var state = s.state;\n        var helper = s.helper;\n        if (!s.index) {\n            // eslint-disable-next-line no-warning-comments\n            // TODO: emit \"result\" event when events for Recommend are implemented\n            helper.emit('recommend:result', {\n                results: null,\n                state: state\n            });\n            return;\n        }\n        helper.lastRecommendResults = new RecommendResults(state, results);\n        // eslint-disable-next-line no-warning-comments\n        // TODO: emit \"result\" event when events for Recommend are implemented\n        helper.emit('recommend:result', {\n            recommend: {\n                results: helper.lastRecommendResults,\n                state: state\n            }\n        });\n    });\n};\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {\n    if (queryId < this._lastQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n    this._lastQueryIdReceived = queryId;\n    this.emit('error', {\n        error: error\n    });\n    if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\nAlgoliaSearchHelper.prototype._dispatchRecommendError = function(queryId, error) {\n    if (queryId < this._lastRecommendQueryIdReceived) {\n        // Outdated answer\n        return;\n    }\n    this._currentNbRecommendQueries -= queryId - this._lastRecommendQueryIdReceived;\n    this._lastRecommendQueryIdReceived = queryId;\n    this.emit('error', {\n        error: error\n    });\n    if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n};\nAlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {\n    return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;\n};\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */ AlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {\n    return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;\n};\nAlgoliaSearchHelper.prototype._change = function(event) {\n    var state = event.state;\n    var isPageReset = event.isPageReset;\n    if (state !== this.state) {\n        this.state = state;\n        this.emit('change', {\n            state: this.state,\n            results: this.lastResults,\n            isPageReset: isPageReset\n        });\n    }\n};\nAlgoliaSearchHelper.prototype._recommendChange = function(event) {\n    var state = event.state;\n    if (state !== this.recommendState) {\n        this.recommendState = state;\n        // eslint-disable-next-line no-warning-comments\n        // TODO: emit \"change\" event when events for Recommend are implemented\n        this.emit('recommend:change', {\n            search: {\n                results: this.lastResults,\n                state: this.state\n            },\n            recommend: {\n                results: this.lastRecommendResults,\n                state: this.recommendState\n            }\n        });\n    }\n};\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.clearCache = function() {\n    if (this.client.clearCache) this.client.clearCache();\n    return this;\n};\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */ AlgoliaSearchHelper.prototype.setClient = function(newClient) {\n    if (this.client === newClient) return this;\n    if (typeof newClient.addAlgoliaAgent === 'function') {\n        newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n    }\n    this.client = newClient;\n    return this;\n};\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */ AlgoliaSearchHelper.prototype.getClient = function() {\n    return this.client;\n};\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @param {function} recommendFn RecommendParameters -> RecommendParameters\n * @return {DerivedHelper} a new DerivedHelper\n */ AlgoliaSearchHelper.prototype.derive = function(fn, recommendFn) {\n    var derivedHelper = new DerivedHelper(this, fn, recommendFn);\n    this.derivedHelpers.push(derivedHelper);\n    return derivedHelper;\n};\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */ AlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {\n    var pos = this.derivedHelpers.indexOf(derivedHelper);\n    if (pos === -1) throw new Error('Derived helper already detached');\n    this.derivedHelpers.splice(pos, 1);\n};\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */ AlgoliaSearchHelper.prototype.hasPendingRequests = function() {\n    return this._currentNbQueries > 0;\n};\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */ /**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */ module.exports = AlgoliaSearchHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/algoliasearch.helper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/compact.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/compact.js ***!
  \****************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2NvbXBhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvY29tcGFjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5LmZpbHRlcihCb29sZWFuKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2RlZmF1bHRzUHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUcsSUFBSTtBQUNQIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9kZWZhdWx0c1B1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOT1RFOiB0aGlzIGJlaGF2ZXMgbGlrZSBsb2Rhc2gvZGVmYXVsdHMsIGJ1dCBkb2Vzbid0IG11dGF0ZSB0aGUgdGFyZ2V0XG4vLyBpdCBhbHNvIHByZXNlcnZlIGtleXMgb3JkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmYXVsdHNQdXJlKCkge1xuICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNvdXJjZXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGFjYywgc291cmNlKSB7XG4gICAgT2JqZWN0LmtleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGlmIGFscmVhZHkgYWRkZWQsIHNvIHRoYXQgd2UgY2FuIGFkZCBpdCBpbiBjb3JyZWN0IG9yZGVyXG4gICAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICAgIH1cbiAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/defaultsPure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js ***!
  \*************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2VzY2FwZUZhY2V0VmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9lc2NhcGVGYWNldFZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXBsYWNlcyBhIGxlYWRpbmcgLSB3aXRoIFxcLVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSB0aGUgZmFjZXQgdmFsdWUgdG8gcmVwbGFjZVxuICogQHJldHVybnMge2FueX0gdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZXNjYXBlRmFjZXRWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL14tLywgJ1xcXFwtJyk7XG59XG5cbi8qKlxuICogUmVwbGFjZXMgYSBsZWFkaW5nIFxcLSB3aXRoIC1cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgdGhlIGVzY2FwZWQgZmFjZXQgdmFsdWVcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB1bmVzY2FwZWQgZmFjZXQgdmFsdWUgb3IgdGhlIHZhbHVlIGlmIGl0IHdhcyBub3QgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGVGYWNldFZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15cXFxcLS8sICctJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlc2NhcGVGYWNldFZhbHVlOiBlc2NhcGVGYWNldFZhbHVlLFxuICB1bmVzY2FwZUZhY2V0VmFsdWU6IHVuZXNjYXBlRmFjZXRWYWx1ZSxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js ***!
  \*************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZpbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZpbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBATUFKT1IgY2FuIGJlIHJlcGxhY2VkIGJ5IG5hdGl2ZSBBcnJheSNmaW5kIHdoZW4gd2UgY2hhbmdlIHN1cHBvcnRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmluZChhcnJheSwgY29tcGFyYXRvcikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiBhcnJheVtpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/findIndex.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/findIndex.js ***!
  \******************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZpbmRJbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9maW5kSW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBATUFKT1IgY2FuIGJlIHJlcGxhY2VkIGJ5IG5hdGl2ZSBBcnJheSNmaW5kSW5kZXggd2hlbiB3ZSBjaGFuZ2Ugc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaW5kKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/findIndex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/flat.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/flat.js ***!
  \*************************************************************************************************************************************/
/***/ ((module) => {

eval("// @MAJOR: remove this function and use Array.prototype.flat\nmodule.exports = function flat(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZsYXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ZsYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQE1BSk9SOiByZW1vdmUgdGhpcyBmdW5jdGlvbiBhbmQgdXNlIEFycmF5LnByb3RvdHlwZS5mbGF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsYXQoYXJyKSB7XG4gIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHZhbCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KHZhbCk7XG4gIH0sIFtdKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/flat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/formatSort.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/formatSort.js ***!
  \*******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar find = __webpack_require__(/*! ./find */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\");\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(\n        defaultInstructions,\n        function (defaultInstruction) {\n          return defaultInstruction[0] === sortInstruction[0];\n        }\n      );\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2Zvcm1hdFNvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLG1KQUFROztBQUUzQjtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2Zvcm1hdFNvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmluZCA9IHJlcXVpcmUoJy4vZmluZCcpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSBzb3J0IGZvcm1hdCBmcm9tIHVzZXIgZnJpZW5kbHkgbm90YXRpb24gdG8gbG9kYXNoIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc29ydEJ5IGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbZGVmYXVsdHNdIGFycmF5IG9mIHByZWRpY2F0ZSBvZiB0aGUgZm9ybSBcImF0dHJpYnV0ZTpvcmRlclwiXG4gKiBAcmV0dXJuIHthcnJheS48c3RyaW5nW10+fSBhcnJheSBjb250YWluaW5nIDIgZWxlbWVudHMgOiBhdHRyaWJ1dGVzLCBvcmRlcnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnRCeSwgZGVmYXVsdHMpIHtcbiAgdmFyIGRlZmF1bHRJbnN0cnVjdGlvbnMgPSAoZGVmYXVsdHMgfHwgW10pLm1hcChmdW5jdGlvbiAoc29ydCkge1xuICAgIHJldHVybiBzb3J0LnNwbGl0KCc6Jyk7XG4gIH0pO1xuXG4gIHJldHVybiBzb3J0QnkucmVkdWNlKFxuICAgIGZ1bmN0aW9uIHByZXBhcmVQcmVkaWNhdGUob3V0LCBzb3J0KSB7XG4gICAgICB2YXIgc29ydEluc3RydWN0aW9uID0gc29ydC5zcGxpdCgnOicpO1xuXG4gICAgICB2YXIgbWF0Y2hpbmdEZWZhdWx0ID0gZmluZChcbiAgICAgICAgZGVmYXVsdEluc3RydWN0aW9ucyxcbiAgICAgICAgZnVuY3Rpb24gKGRlZmF1bHRJbnN0cnVjdGlvbikge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0SW5zdHJ1Y3Rpb25bMF0gPT09IHNvcnRJbnN0cnVjdGlvblswXTtcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKHNvcnRJbnN0cnVjdGlvbi5sZW5ndGggPiAxIHx8ICFtYXRjaGluZ0RlZmF1bHQpIHtcbiAgICAgICAgb3V0WzBdLnB1c2goc29ydEluc3RydWN0aW9uWzBdKTtcbiAgICAgICAgb3V0WzFdLnB1c2goc29ydEluc3RydWN0aW9uWzFdKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cblxuICAgICAgb3V0WzBdLnB1c2gobWF0Y2hpbmdEZWZhdWx0WzBdKTtcbiAgICAgIG91dFsxXS5wdXNoKG1hdGNoaW5nRGVmYXVsdFsxXSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sXG4gICAgW1tdLCBbXV1cbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/formatSort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/inherits.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/inherits.js ***!
  \*****************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  });\n}\n\nmodule.exports = inherits;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2luaGVyaXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvaW5oZXJpdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaGVyaXRzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/inherits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/intersection.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/intersection.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function (value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ludGVyc2VjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2RlcGxveS1hZGFwL3NyYy9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL2ludGVyc2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbihhcnIxLCBhcnIyKSB7XG4gIHJldHVybiBhcnIxLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGFycjIuaW5kZXhPZih2YWx1ZSkgPiAtMSAmJlxuICAgICAgYXJyMS5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXggLyogc2tpcHMgZHVwbGljYXRlcyAqL1xuICAgICk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdGlvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/intersection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js ***!
  \**************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL21lcmdlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxXQUFXO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDQUF3QyxPQUFPO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvbWVyZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBfbWVyZ2UoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICApO1xufVxuXG5mdW5jdGlvbiBfbWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHRhcmdldCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKFxuICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkgfHxcbiAgICAgIGtleSA9PT0gJ19fcHJvdG9fXycgfHxcbiAgICAgIGtleSA9PT0gJ2NvbnN0cnVjdG9yJ1xuICAgICkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlVmFsID0gc291cmNlW2tleV07XG4gICAgdmFyIHRhcmdldFZhbCA9IHRhcmdldFtrZXldO1xuXG4gICAgaWYgKHR5cGVvZiB0YXJnZXRWYWwgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzb3VyY2VWYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24odGFyZ2V0VmFsKSAmJlxuICAgICAgaXNPYmplY3RPckFycmF5T3JGdW5jdGlvbihzb3VyY2VWYWwpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IF9tZXJnZSh0YXJnZXRWYWwsIHNvdXJjZVZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc291cmNlVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIE9iamVjdC5hc3NpZ24sIGJ1dCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZCBpbmhlcml0ZWRcbiAqIGVudW1lcmFibGUga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKlxuICogTk9URTogdGhpcyBiZWhhdmVzIGxpa2UgbG9kYXNoL21lcmdlLCBidXQ6XG4gKiAtIGRvZXMgbXV0YXRlIGZ1bmN0aW9ucyBpZiB0aGV5IGFyZSBhIHNvdXJjZVxuICogLSB0cmVhdHMgbm9uLXBsYWluIG9iamVjdHMgYXMgcGxhaW5cbiAqIC0gZG9lcyBub3Qgd29yayBmb3IgY2lyY3VsYXIgb2JqZWN0c1xuICogLSB0cmVhdHMgc3BhcnNlIGFycmF5cyBhcyBzcGFyc2VcbiAqIC0gZG9lcyBub3QgY29udmVydCBBcnJheS1saWtlIG9iamVjdHMgKEFyZ3VtZW50cywgTm9kZUxpc3RzLCBldGMuKSB0byBhcnJheXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCkge1xuICBpZiAoIWlzT2JqZWN0T3JBcnJheU9yRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGlmIChpc09iamVjdE9yQXJyYXlPckZ1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICAgIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js ***!
  \************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order and keep the highest numeric value\nfunction mergeNumericMax() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      var accValue = typeof acc[key] === 'number' ? acc[key] : 0;\n      var sourceValue = source[key];\n\n      if (sourceValue === undefined) {\n        return;\n      }\n\n      if (sourceValue >= accValue) {\n        if (acc[key] !== undefined) {\n          // remove if already added, so that we can add it in correct order\n          delete acc[key];\n        }\n        acc[key] = sourceValue;\n      }\n    });\n    return acc;\n  }, {});\n}\n\nmodule.exports = mergeNumericMax;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL21lcmdlTnVtZXJpY01heC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHLElBQUk7QUFDUDs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvbWVyZ2VOdW1lcmljTWF4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTk9URTogdGhpcyBiZWhhdmVzIGxpa2UgbG9kYXNoL2RlZmF1bHRzLCBidXQgZG9lc24ndCBtdXRhdGUgdGhlIHRhcmdldFxuLy8gaXQgYWxzbyBwcmVzZXJ2ZSBrZXlzIG9yZGVyIGFuZCBrZWVwIHRoZSBoaWdoZXN0IG51bWVyaWMgdmFsdWVcbmZ1bmN0aW9uIG1lcmdlTnVtZXJpY01heCgpIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzb3VyY2VzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChhY2MsIHNvdXJjZSkge1xuICAgIE9iamVjdC5rZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBhY2NWYWx1ZSA9IHR5cGVvZiBhY2Nba2V5XSA9PT0gJ251bWJlcicgPyBhY2Nba2V5XSA6IDA7XG4gICAgICB2YXIgc291cmNlVmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgaWYgKHNvdXJjZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc291cmNlVmFsdWUgPj0gYWNjVmFsdWUpIHtcbiAgICAgICAgaWYgKGFjY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyByZW1vdmUgaWYgYWxyZWFkeSBhZGRlZCwgc28gdGhhdCB3ZSBjYW4gYWRkIGl0IGluIGNvcnJlY3Qgb3JkZXJcbiAgICAgICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2VWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VOdW1lcmljTWF4O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js ***!
  \**********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL29iamVjdEhhc0tleXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vYmplY3RIYXNLZXlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0SGFzS2V5cyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA+IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0SGFzS2V5cztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js ***!
  \*************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    // eslint-disable-next-line no-continue\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL29taXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy9mdW5jdGlvbnMvb21pdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9ibG9iLzNhYWFmYWUwNTNmYTc1ZmViYjNhYTQ1ZDQ1YjZmMDA2NDZlMzBiYTQvcGFja2FnZXMvYmFiZWwtaGVscGVycy9zcmMvaGVscGVycy5qcyNMNjA0LUw2MjBcbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleTtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/omit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/orderBy.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/orderBy.js ***!
  \****************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function (value, index) {\n    return {\n      criteria: iteratees.map(function (iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value,\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function (res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL29yZGVyQnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZUFBZTtBQUMxQixXQUFXLGVBQWU7QUFDMUIsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy9vcmRlckJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbDtcblxuICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbDtcblxuICAgIGlmIChcbiAgICAgICghb3RoSXNOdWxsICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCkgfHxcbiAgICAgICF2YWxJc0RlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAoIXZhbElzTnVsbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQpIHx8XG4gICAgICAhb3RoSXNEZWZpbmVkXG4gICAgKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8b2JqZWN0Pn0gY29sbGVjdGlvbiBvYmplY3Qgd2l0aCBrZXlzIGluIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gaXRlcmF0ZWVzIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3JkZXJzIGFzYyB8IGRlc2NcbiAqIEByZXR1cm4ge0FycmF5PG9iamVjdD59IHNvcnRlZCBjb2xsZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KG9yZGVycykpIHtcbiAgICBvcmRlcnMgPSBbXTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBjb2xsZWN0aW9uLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZXMubWFwKGZ1bmN0aW9uIChpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbaXRlcmF0ZWVdO1xuICAgICAgfSksXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgfTtcbiAgfSk7XG5cbiAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gY29tcGFyZXIob2JqZWN0LCBvdGhlcikge1xuICAgIHZhciBpbmRleCA9IC0xO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBvYmplY3QuY3JpdGVyaWEubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzID0gY29tcGFyZUFzY2VuZGluZyhvYmplY3QuY3JpdGVyaWFbaW5kZXhdLCBvdGhlci5jcml0ZXJpYVtpbmRleF0pO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyc1tpbmRleF0gPT09ICdkZXNjJykge1xuICAgICAgICAgIHJldHVybiAtcmVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0Lm1hcChmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIHJlcy52YWx1ZTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3JkZXJCeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/orderBy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/valToNumber.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/valToNumber.js ***!
  \********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error(\n    'The value should be a number, a parsable string or an array of those.'\n  );\n}\n\nmodule.exports = valToNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvZnVuY3Rpb25zL3ZhbFRvTnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL2Z1bmN0aW9ucy92YWxUb051bWJlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHZhbFRvTnVtYmVyKHYpIHtcbiAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHYpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICByZXR1cm4gdi5tYXAodmFsVG9OdW1iZXIpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICdUaGUgdmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyLCBhIHBhcnNhYmxlIHN0cmluZyBvciBhbiBhcnJheSBvZiB0aG9zZS4nXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsVG9OdW1iZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/valToNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/requestBuilder.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/requestBuilder.js ***!
  \*************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar merge = __webpack_require__(/*! ./functions/merge */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/merge.js\");\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getCompositionQueries: function getQueries(state) {\n    return [\n      {\n        compositionID: state.index,\n        requestBody: {\n          params: requestBuilder._getCompositionHitsSearchParams(state),\n        },\n      },\n    ];\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getCompositionHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(\n        state.disjunctiveFacets.map(function (value) {\n          if (\n            state.disjunctiveFacetsRefinements &&\n            state.disjunctiveFacetsRefinements[value] &&\n            state.disjunctiveFacetsRefinements[value].length > 0\n          ) {\n            // only tag a disjunctiveFacet as disjunctive if it has a value selected\n            // this helps avoid hitting the limit of 20 disjunctive facets in the Composition API\n            return 'disjunctive(' + value + ')';\n          }\n          return value;\n        })\n      )\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    var params = state.getQueryParams();\n\n    delete params.highlightPreTag;\n    delete params.highlightPostTag;\n    // not a valid search parameter, it is handled in _getCompositionQueries\n    delete params.index;\n\n    return sortObject(merge({}, params, additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/requestBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvaXNWYWxpZFVzZXJUb2tlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixLQUFLO0FBQzlCIiwic291cmNlcyI6WyIvdmFyL3d3dy9kZXBsb3ktYWRhcC9zcmMvbm9kZV9tb2R1bGVzLy5wbnBtL2FsZ29saWFzZWFyY2gtaGVscGVyQDMuMjQuM19hbGdvbGlhc2VhcmNoQDQuMjQuMC9ub2RlX21vZHVsZXMvYWxnb2xpYXNlYXJjaC1oZWxwZXIvc3JjL3V0aWxzL2lzVmFsaWRVc2VyVG9rZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVmFsaWRVc2VyVG9rZW4odXNlclRva2VuKSB7XG4gIGlmICh1c2VyVG9rZW4gPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIC9eW2EtekEtWjAtOV8tXXsxLDY0fSQvLnRlc3QodXNlclRva2VuKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js ***!
  \********************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar find = __webpack_require__(/*! ../functions/find */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/find.js\");\nvar flat = __webpack_require__(/*! ../functions/flat */ \"(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/functions/flat.js\");\n\nfunction getAverageIndices(indexTracker, nrOfObjs) {\n  var avgIndices = [];\n\n  Object.keys(indexTracker).forEach(function (key) {\n    if (indexTracker[key].count < 2) {\n      indexTracker[key].indexSum += 100;\n    }\n    avgIndices.push({\n      objectID: key,\n      avgOfIndices: indexTracker[key].indexSum / nrOfObjs,\n    });\n  });\n\n  return avgIndices.sort(function (a, b) {\n    return a.avgOfIndices > b.avgOfIndices ? 1 : -1;\n  });\n}\n\nfunction sortAndMergeRecommendations(results) {\n  var indexTracker = {};\n\n  results.forEach(function (hits) {\n    hits.forEach(function (hit, index) {\n      if (!indexTracker[hit.objectID]) {\n        indexTracker[hit.objectID] = { indexSum: index, count: 1 };\n      } else {\n        indexTracker[hit.objectID] = {\n          indexSum: indexTracker[hit.objectID].indexSum + index,\n          count: indexTracker[hit.objectID].count + 1,\n        };\n      }\n    });\n  });\n\n  var sortedAverageIndices = getAverageIndices(indexTracker, results.length);\n\n  var finalOrder = sortedAverageIndices.reduce(function (\n    orderedHits,\n    avgIndexRef\n  ) {\n    var result = find(flat(results), function (hit) {\n      return hit.objectID === avgIndexRef.objectID;\n    });\n    return result ? orderedHits.concat(result) : orderedHits;\n  },\n  []);\n\n  return finalOrder;\n}\n\nmodule.exports = sortAndMergeRecommendations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdXRpbHMvc29ydEFuZE1lcmdlUmVjb21tZW5kYXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyw4SkFBbUI7QUFDdEMsV0FBVyxtQkFBTyxDQUFDLDhKQUFtQjs7QUFFdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy91dGlscy9zb3J0QW5kTWVyZ2VSZWNvbW1lbmRhdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmluZCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9maW5kJyk7XG52YXIgZmxhdCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9mbGF0Jyk7XG5cbmZ1bmN0aW9uIGdldEF2ZXJhZ2VJbmRpY2VzKGluZGV4VHJhY2tlciwgbnJPZk9ianMpIHtcbiAgdmFyIGF2Z0luZGljZXMgPSBbXTtcblxuICBPYmplY3Qua2V5cyhpbmRleFRyYWNrZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChpbmRleFRyYWNrZXJba2V5XS5jb3VudCA8IDIpIHtcbiAgICAgIGluZGV4VHJhY2tlcltrZXldLmluZGV4U3VtICs9IDEwMDtcbiAgICB9XG4gICAgYXZnSW5kaWNlcy5wdXNoKHtcbiAgICAgIG9iamVjdElEOiBrZXksXG4gICAgICBhdmdPZkluZGljZXM6IGluZGV4VHJhY2tlcltrZXldLmluZGV4U3VtIC8gbnJPZk9ianMsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBhdmdJbmRpY2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYS5hdmdPZkluZGljZXMgPiBiLmF2Z09mSW5kaWNlcyA/IDEgOiAtMTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRBbmRNZXJnZVJlY29tbWVuZGF0aW9ucyhyZXN1bHRzKSB7XG4gIHZhciBpbmRleFRyYWNrZXIgPSB7fTtcblxuICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKGhpdHMpIHtcbiAgICBoaXRzLmZvckVhY2goZnVuY3Rpb24gKGhpdCwgaW5kZXgpIHtcbiAgICAgIGlmICghaW5kZXhUcmFja2VyW2hpdC5vYmplY3RJRF0pIHtcbiAgICAgICAgaW5kZXhUcmFja2VyW2hpdC5vYmplY3RJRF0gPSB7IGluZGV4U3VtOiBpbmRleCwgY291bnQ6IDEgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4VHJhY2tlcltoaXQub2JqZWN0SURdID0ge1xuICAgICAgICAgIGluZGV4U3VtOiBpbmRleFRyYWNrZXJbaGl0Lm9iamVjdElEXS5pbmRleFN1bSArIGluZGV4LFxuICAgICAgICAgIGNvdW50OiBpbmRleFRyYWNrZXJbaGl0Lm9iamVjdElEXS5jb3VudCArIDEsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHZhciBzb3J0ZWRBdmVyYWdlSW5kaWNlcyA9IGdldEF2ZXJhZ2VJbmRpY2VzKGluZGV4VHJhY2tlciwgcmVzdWx0cy5sZW5ndGgpO1xuXG4gIHZhciBmaW5hbE9yZGVyID0gc29ydGVkQXZlcmFnZUluZGljZXMucmVkdWNlKGZ1bmN0aW9uIChcbiAgICBvcmRlcmVkSGl0cyxcbiAgICBhdmdJbmRleFJlZlxuICApIHtcbiAgICB2YXIgcmVzdWx0ID0gZmluZChmbGF0KHJlc3VsdHMpLCBmdW5jdGlvbiAoaGl0KSB7XG4gICAgICByZXR1cm4gaGl0Lm9iamVjdElEID09PSBhdmdJbmRleFJlZi5vYmplY3RJRDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0ID8gb3JkZXJlZEhpdHMuY29uY2F0KHJlc3VsdCkgOiBvcmRlcmVkSGl0cztcbiAgfSxcbiAgW10pO1xuXG4gIHJldHVybiBmaW5hbE9yZGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRBbmRNZXJnZVJlY29tbWVuZGF0aW9ucztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/version.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/version.js ***!
  \******************************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = '3.24.3';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYWxnb2xpYXNlYXJjaC1oZWxwZXJAMy4yNC4zX2FsZ29saWFzZWFyY2hANC4yNC4wL25vZGVfbW9kdWxlcy9hbGdvbGlhc2VhcmNoLWhlbHBlci9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiIsInNvdXJjZXMiOlsiL3Zhci93d3cvZGVwbG95LWFkYXAvc3JjL25vZGVfbW9kdWxlcy8ucG5wbS9hbGdvbGlhc2VhcmNoLWhlbHBlckAzLjI0LjNfYWxnb2xpYXNlYXJjaEA0LjI0LjAvbm9kZV9tb2R1bGVzL2FsZ29saWFzZWFyY2gtaGVscGVyL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAnMy4yNC4zJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/algoliasearch-helper@3.24.3_algoliasearch@4.24.0/node_modules/algoliasearch-helper/src/version.js\n");

/***/ })

};
;