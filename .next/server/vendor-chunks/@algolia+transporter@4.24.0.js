"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia+transporter@4.24.0";
exports.ids = ["vendor-chunks/@algolia+transporter@4.24.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@algolia+transporter@4.24.0/node_modules/@algolia/transporter/dist/transporter.esm.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+transporter@4.24.0/node_modules/@algolia/transporter/dist/transporter.esm.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallEnum: () => (/* binding */ CallEnum),\n/* harmony export */   HostStatusEnum: () => (/* binding */ HostStatusEnum),\n/* harmony export */   createApiError: () => (/* binding */ createApiError),\n/* harmony export */   createDeserializationError: () => (/* binding */ createDeserializationError),\n/* harmony export */   createMappedRequestOptions: () => (/* binding */ createMappedRequestOptions),\n/* harmony export */   createRetryError: () => (/* binding */ createRetryError),\n/* harmony export */   createStatefulHost: () => (/* binding */ createStatefulHost),\n/* harmony export */   createStatelessHost: () => (/* binding */ createStatelessHost),\n/* harmony export */   createTransporter: () => (/* binding */ createTransporter),\n/* harmony export */   createUserAgent: () => (/* binding */ createUserAgent),\n/* harmony export */   deserializeFailure: () => (/* binding */ deserializeFailure),\n/* harmony export */   deserializeSuccess: () => (/* binding */ deserializeSuccess),\n/* harmony export */   isStatefulHostTimeouted: () => (/* binding */ isStatefulHostTimeouted),\n/* harmony export */   isStatefulHostUp: () => (/* binding */ isStatefulHostUp),\n/* harmony export */   serializeData: () => (/* binding */ serializeData),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeQueryParameters: () => (/* binding */ serializeQueryParameters),\n/* harmony export */   serializeUrl: () => (/* binding */ serializeUrl),\n/* harmony export */   stackFrameWithoutCredentials: () => (/* binding */ stackFrameWithoutCredentials),\n/* harmony export */   stackTraceWithoutCredentials: () => (/* binding */ stackTraceWithoutCredentials)\n/* harmony export */ });\n/* harmony import */ var _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/requester-common */ \"(ssr)/./node_modules/.pnpm/@algolia+requester-common@4.24.0/node_modules/@algolia/requester-common/dist/requester-common.esm.js\");\n\n\nfunction createMappedRequestOptions(requestOptions, timeout) {\r\n    const options = requestOptions || {};\r\n    const data = options.data || {};\r\n    Object.keys(options).forEach(key => {\r\n        if (['timeout', 'headers', 'queryParameters', 'data', 'cacheable'].indexOf(key) === -1) {\r\n            data[key] = options[key]; // eslint-disable-line functional/immutable-data\r\n        }\r\n    });\r\n    return {\r\n        data: Object.entries(data).length > 0 ? data : undefined,\r\n        timeout: options.timeout || timeout,\r\n        headers: options.headers || {},\r\n        queryParameters: options.queryParameters || {},\r\n        cacheable: options.cacheable,\r\n    };\r\n}\n\nconst CallEnum = {\r\n    /**\r\n     * If the host is read only.\r\n     */\r\n    Read: 1,\r\n    /**\r\n     * If the host is write only.\r\n     */\r\n    Write: 2,\r\n    /**\r\n     * If the host is both read and write.\r\n     */\r\n    Any: 3,\r\n};\n\nconst HostStatusEnum = {\r\n    Up: 1,\r\n    Down: 2,\r\n    Timeouted: 3,\r\n};\n\n// By default, API Clients at Algolia have expiration delay\r\n// of 5 mins. In the JavaScript client, we have 2 mins.\r\nconst EXPIRATION_DELAY = 2 * 60 * 1000;\r\nfunction createStatefulHost(host, status = HostStatusEnum.Up) {\r\n    return {\r\n        ...host,\r\n        status,\r\n        lastUpdate: Date.now(),\r\n    };\r\n}\r\nfunction isStatefulHostUp(host) {\r\n    return host.status === HostStatusEnum.Up || Date.now() - host.lastUpdate > EXPIRATION_DELAY;\r\n}\r\nfunction isStatefulHostTimeouted(host) {\r\n    return (host.status === HostStatusEnum.Timeouted && Date.now() - host.lastUpdate <= EXPIRATION_DELAY);\r\n}\n\nfunction createStatelessHost(options) {\r\n    if (typeof options === 'string') {\r\n        return {\r\n            protocol: 'https',\r\n            url: options,\r\n            accept: CallEnum.Any,\r\n        };\r\n    }\r\n    return {\r\n        protocol: options.protocol || 'https',\r\n        url: options.url,\r\n        accept: options.accept || CallEnum.Any,\r\n    };\r\n}\n\nfunction createRetryableOptions(hostsCache, statelessHosts) {\r\n    return Promise.all(statelessHosts.map(statelessHost => {\r\n        return hostsCache.get(statelessHost, () => {\r\n            return Promise.resolve(createStatefulHost(statelessHost));\r\n        });\r\n    })).then(statefulHosts => {\r\n        const hostsUp = statefulHosts.filter(host => isStatefulHostUp(host));\r\n        const hostsTimeouted = statefulHosts.filter(host => isStatefulHostTimeouted(host));\r\n        /**\r\n         * Note, we put the hosts that previously timeouted on the end of the list.\r\n         */\r\n        const hostsAvailable = [...hostsUp, ...hostsTimeouted];\r\n        const statelessHostsAvailable = hostsAvailable.length > 0\r\n            ? hostsAvailable.map(host => createStatelessHost(host))\r\n            : statelessHosts;\r\n        return {\r\n            getTimeout(timeoutsCount, baseTimeout) {\r\n                /**\r\n                 * Imagine that you have 4 hosts, if timeouts will increase\r\n                 * on the following way: 1 (timeouted) > 4 (timeouted) > 5 (200)\r\n                 *\r\n                 * Note that, the very next request, we start from the previous timeout\r\n                 *\r\n                 *  5 (timeouted) > 6 (timeouted) > 7 ...\r\n                 *\r\n                 * This strategy may need to be reviewed, but is the strategy on the our\r\n                 * current v3 version.\r\n                 */\r\n                const timeoutMultiplier = hostsTimeouted.length === 0 && timeoutsCount === 0\r\n                    ? 1\r\n                    : hostsTimeouted.length + 3 + timeoutsCount;\r\n                return timeoutMultiplier * baseTimeout;\r\n            },\r\n            statelessHosts: statelessHostsAvailable,\r\n        };\r\n    });\r\n}\n\nconst isNetworkError = ({ isTimedOut, status }) => {\r\n    return !isTimedOut && ~~status === 0;\r\n};\r\nconst isRetryable = (response) => {\r\n    const status = response.status;\r\n    const isTimedOut = response.isTimedOut;\r\n    return (isTimedOut || isNetworkError(response) || (~~(status / 100) !== 2 && ~~(status / 100) !== 4));\r\n};\r\nconst isSuccess = ({ status }) => {\r\n    return ~~(status / 100) === 2;\r\n};\r\nconst retryDecision = (response, outcomes) => {\r\n    if (isRetryable(response)) {\r\n        return outcomes.onRetry(response);\r\n    }\r\n    if (isSuccess(response)) {\r\n        return outcomes.onSuccess(response);\r\n    }\r\n    return outcomes.onFail(response);\r\n};\n\nfunction retryableRequest(transporter, statelessHosts, request, requestOptions) {\r\n    const stackTrace = []; // eslint-disable-line functional/prefer-readonly-type\r\n    /**\r\n     * First we prepare the payload that do not depend from hosts.\r\n     */\r\n    const data = serializeData(request, requestOptions);\r\n    const headers = serializeHeaders(transporter, requestOptions);\r\n    const method = request.method;\r\n    // On `GET`, the data is proxied to query parameters.\r\n    const dataQueryParameters = request.method !== _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__.MethodEnum.Get\r\n        ? {}\r\n        : {\r\n            ...request.data,\r\n            ...requestOptions.data,\r\n        };\r\n    const queryParameters = {\r\n        'x-algolia-agent': transporter.userAgent.value,\r\n        ...transporter.queryParameters,\r\n        ...dataQueryParameters,\r\n        ...requestOptions.queryParameters,\r\n    };\r\n    let timeoutsCount = 0; // eslint-disable-line functional/no-let\r\n    const retry = (hosts, // eslint-disable-line functional/prefer-readonly-type\r\n    getTimeout) => {\r\n        /**\r\n         * We iterate on each host, until there is no host left.\r\n         */\r\n        const host = hosts.pop(); // eslint-disable-line functional/immutable-data\r\n        if (host === undefined) {\r\n            throw createRetryError(stackTraceWithoutCredentials(stackTrace));\r\n        }\r\n        const payload = {\r\n            data,\r\n            headers,\r\n            method,\r\n            url: serializeUrl(host, request.path, queryParameters),\r\n            connectTimeout: getTimeout(timeoutsCount, transporter.timeouts.connect),\r\n            responseTimeout: getTimeout(timeoutsCount, requestOptions.timeout),\r\n        };\r\n        /**\r\n         * The stackFrame is pushed to the stackTrace so we\r\n         * can have information about onRetry and onFailure\r\n         * decisions.\r\n         */\r\n        const pushToStackTrace = (response) => {\r\n            const stackFrame = {\r\n                request: payload,\r\n                response,\r\n                host,\r\n                triesLeft: hosts.length,\r\n            };\r\n            // eslint-disable-next-line functional/immutable-data\r\n            stackTrace.push(stackFrame);\r\n            return stackFrame;\r\n        };\r\n        const decisions = {\r\n            onSuccess: response => deserializeSuccess(response),\r\n            onRetry(response) {\r\n                const stackFrame = pushToStackTrace(response);\r\n                /**\r\n                 * If response is a timeout, we increaset the number of\r\n                 * timeouts so we can increase the timeout later.\r\n                 */\r\n                if (response.isTimedOut) {\r\n                    timeoutsCount++;\r\n                }\r\n                return Promise.all([\r\n                    /**\r\n                     * Failures are individually send the logger, allowing\r\n                     * the end user to debug / store stack frames even\r\n                     * when a retry error does not happen.\r\n                     */\r\n                    transporter.logger.info('Retryable failure', stackFrameWithoutCredentials(stackFrame)),\r\n                    /**\r\n                     * We also store the state of the host in failure cases. If the host, is\r\n                     * down it will remain down for the next 2 minutes. In a timeout situation,\r\n                     * this host will be added end of the list of hosts on the next request.\r\n                     */\r\n                    transporter.hostsCache.set(host, createStatefulHost(host, response.isTimedOut ? HostStatusEnum.Timeouted : HostStatusEnum.Down)),\r\n                ]).then(() => retry(hosts, getTimeout));\r\n            },\r\n            onFail(response) {\r\n                pushToStackTrace(response);\r\n                throw deserializeFailure(response, stackTraceWithoutCredentials(stackTrace));\r\n            },\r\n        };\r\n        return transporter.requester.send(payload).then(response => {\r\n            return retryDecision(response, decisions);\r\n        });\r\n    };\r\n    /**\r\n     * Finally, for each retryable host perform request until we got a non\r\n     * retryable response. Some notes here:\r\n     *\r\n     * 1. The reverse here is applied so we can apply a `pop` later on => more performant.\r\n     * 2. We also get from the retryable options a timeout multiplier that is tailored\r\n     * for the current context.\r\n     */\r\n    return createRetryableOptions(transporter.hostsCache, statelessHosts).then(options => {\r\n        return retry([...options.statelessHosts].reverse(), options.getTimeout);\r\n    });\r\n}\n\nfunction createTransporter(options) {\r\n    const { hostsCache, logger, requester, requestsCache, responsesCache, timeouts, userAgent, hosts, queryParameters, headers, } = options;\r\n    const transporter = {\r\n        hostsCache,\r\n        logger,\r\n        requester,\r\n        requestsCache,\r\n        responsesCache,\r\n        timeouts,\r\n        userAgent,\r\n        headers,\r\n        queryParameters,\r\n        hosts: hosts.map(host => createStatelessHost(host)),\r\n        read(request, requestOptions) {\r\n            /**\r\n             * First, we compute the user request options. Now, keep in mind,\r\n             * that using request options the user is able to modified the intire\r\n             * payload of the request. Such as headers, query parameters, and others.\r\n             */\r\n            const mappedRequestOptions = createMappedRequestOptions(requestOptions, transporter.timeouts.read);\r\n            const createRetryableRequest = () => {\r\n                /**\r\n                 * Then, we prepare a function factory that contains the construction of\r\n                 * the retryable request. At this point, we may *not* perform the actual\r\n                 * request. But we want to have the function factory ready.\r\n                 */\r\n                return retryableRequest(transporter, transporter.hosts.filter(host => (host.accept & CallEnum.Read) !== 0), request, mappedRequestOptions);\r\n            };\r\n            /**\r\n             * Once we have the function factory ready, we need to determine of the\r\n             * request is \"cacheable\" - should be cached. Note that, once again,\r\n             * the user can force this option.\r\n             */\r\n            const cacheable = mappedRequestOptions.cacheable !== undefined\r\n                ? mappedRequestOptions.cacheable\r\n                : request.cacheable;\r\n            /**\r\n             * If is not \"cacheable\", we immediatly trigger the retryable request, no\r\n             * need to check cache implementations.\r\n             */\r\n            if (cacheable !== true) {\r\n                return createRetryableRequest();\r\n            }\r\n            /**\r\n             * If the request is \"cacheable\", we need to first compute the key to ask\r\n             * the cache implementations if this request is on progress or if the\r\n             * response already exists on the cache.\r\n             */\r\n            const key = {\r\n                request,\r\n                mappedRequestOptions,\r\n                transporter: {\r\n                    queryParameters: transporter.queryParameters,\r\n                    headers: transporter.headers,\r\n                },\r\n            };\r\n            /**\r\n             * With the computed key, we first ask the responses cache\r\n             * implemention if this request was been resolved before.\r\n             */\r\n            return transporter.responsesCache.get(key, () => {\r\n                /**\r\n                 * If the request has never resolved before, we actually ask if there\r\n                 * is a current request with the same key on progress.\r\n                 */\r\n                return transporter.requestsCache.get(key, () => {\r\n                    return (transporter.requestsCache\r\n                        /**\r\n                         * Finally, if there is no request in progress with the same key,\r\n                         * this `createRetryableRequest()` will actually trigger the\r\n                         * retryable request.\r\n                         */\r\n                        .set(key, createRetryableRequest())\r\n                        .then(response => Promise.all([transporter.requestsCache.delete(key), response]), err => Promise.all([transporter.requestsCache.delete(key), Promise.reject(err)]))\r\n                        .then(([_, response]) => response));\r\n                });\r\n            }, {\r\n                /**\r\n                 * Of course, once we get this response back from the server, we\r\n                 * tell response cache to actually store the received response\r\n                 * to be used later.\r\n                 */\r\n                miss: response => transporter.responsesCache.set(key, response),\r\n            });\r\n        },\r\n        write(request, requestOptions) {\r\n            /**\r\n             * On write requests, no cache mechanisms are applied, and we\r\n             * proxy the request immediately to the requester.\r\n             */\r\n            return retryableRequest(transporter, transporter.hosts.filter(host => (host.accept & CallEnum.Write) !== 0), request, createMappedRequestOptions(requestOptions, transporter.timeouts.write));\r\n        },\r\n    };\r\n    return transporter;\r\n}\n\nfunction createUserAgent(version) {\r\n    const userAgent = {\r\n        value: `Algolia for JavaScript (${version})`,\r\n        add(options) {\r\n            const addedUserAgent = `; ${options.segment}${options.version !== undefined ? ` (${options.version})` : ''}`;\r\n            if (userAgent.value.indexOf(addedUserAgent) === -1) {\r\n                // eslint-disable-next-line functional/immutable-data\r\n                userAgent.value = `${userAgent.value}${addedUserAgent}`;\r\n            }\r\n            return userAgent;\r\n        },\r\n    };\r\n    return userAgent;\r\n}\n\nfunction deserializeSuccess(response) {\r\n    // eslint-disable-next-line functional/no-try-statement\r\n    try {\r\n        return JSON.parse(response.content);\r\n    }\r\n    catch (e) {\r\n        throw createDeserializationError(e.message, response);\r\n    }\r\n}\r\nfunction deserializeFailure({ content, status }, stackFrame) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let message = content;\r\n    // eslint-disable-next-line functional/no-try-statement\r\n    try {\r\n        message = JSON.parse(content).message;\r\n    }\r\n    catch (e) {\r\n        // ..\r\n    }\r\n    return createApiError(message, status, stackFrame);\r\n}\n\n// eslint-disable-next-line functional/prefer-readonly-type\r\nfunction encode(format, ...args) {\r\n    // eslint-disable-next-line functional/no-let\r\n    let i = 0;\r\n    return format.replace(/%s/g, () => encodeURIComponent(args[i++]));\r\n}\n\nfunction serializeUrl(host, path, queryParameters) {\r\n    const queryParametersAsString = serializeQueryParameters(queryParameters);\r\n    // eslint-disable-next-line functional/no-let\r\n    let url = `${host.protocol}://${host.url}/${path.charAt(0) === '/' ? path.substr(1) : path}`;\r\n    if (queryParametersAsString.length) {\r\n        url += `?${queryParametersAsString}`;\r\n    }\r\n    return url;\r\n}\r\nfunction serializeQueryParameters(parameters) {\r\n    const isObjectOrArray = (value) => Object.prototype.toString.call(value) === '[object Object]' ||\r\n        Object.prototype.toString.call(value) === '[object Array]';\r\n    return Object.keys(parameters)\r\n        .map(key => encode('%s=%s', key, isObjectOrArray(parameters[key]) ? JSON.stringify(parameters[key]) : parameters[key]))\r\n        .join('&');\r\n}\r\nfunction serializeData(request, requestOptions) {\r\n    if (request.method === _algolia_requester_common__WEBPACK_IMPORTED_MODULE_0__.MethodEnum.Get ||\r\n        (request.data === undefined && requestOptions.data === undefined)) {\r\n        return undefined;\r\n    }\r\n    const data = Array.isArray(request.data)\r\n        ? request.data\r\n        : { ...request.data, ...requestOptions.data };\r\n    return JSON.stringify(data);\r\n}\r\nfunction serializeHeaders(transporter, requestOptions) {\r\n    const headers = {\r\n        ...transporter.headers,\r\n        ...requestOptions.headers,\r\n    };\r\n    const serializedHeaders = {};\r\n    Object.keys(headers).forEach(header => {\r\n        const value = headers[header];\r\n        // @ts-ignore\r\n        // eslint-disable-next-line functional/immutable-data\r\n        serializedHeaders[header.toLowerCase()] = value;\r\n    });\r\n    return serializedHeaders;\r\n}\n\nfunction stackTraceWithoutCredentials(stackTrace) {\r\n    return stackTrace.map(stackFrame => stackFrameWithoutCredentials(stackFrame));\r\n}\r\nfunction stackFrameWithoutCredentials(stackFrame) {\r\n    const modifiedHeaders = stackFrame.request.headers['x-algolia-api-key']\r\n        ? { 'x-algolia-api-key': '*****' }\r\n        : {};\r\n    return {\r\n        ...stackFrame,\r\n        request: {\r\n            ...stackFrame.request,\r\n            headers: {\r\n                ...stackFrame.request.headers,\r\n                ...modifiedHeaders,\r\n            },\r\n        },\r\n    };\r\n}\n\nfunction createApiError(message, status, transporterStackTrace) {\r\n    return {\r\n        name: 'ApiError',\r\n        message,\r\n        status,\r\n        transporterStackTrace,\r\n    };\r\n}\n\nfunction createDeserializationError(message, response) {\r\n    return {\r\n        name: 'DeserializationError',\r\n        message,\r\n        response,\r\n    };\r\n}\n\nfunction createRetryError(transporterStackTrace) {\r\n    return {\r\n        name: 'RetryError',\r\n        message: 'Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support .',\r\n        transporterStackTrace,\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+transporter@4.24.0/node_modules/@algolia/transporter/dist/transporter.esm.js\n");

/***/ })

};
;